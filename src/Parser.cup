
/*
 * Projet de compilation L3 Miage :
 * Ecriture d'un compilateur
 *
 * auteurs : Matthieu VINCENT, Martin LEMAITRE, Loic REISDOERFER, Mervine LIEFFROY
 * (c) 2017
 */ 


package fr.ul.miage.projet.generated;


/* la grammaire */
terminal COM, GLOB, ENTIER, NOM, NUM, FONCTION, PRINC, LOC;
terminal PV, V, EG, PO, PF, AO, AF;
terminal PLUS, MOINS, MUL, DIV, SI, SINON, OPBOOL, TQ, ECRIRE, LIRE, RET, APPEL;
non terminal prog, block, instruction, declarationVar, declarationVarLoc, declarationFonc, parametreD, parametreF, parametreA;
non terminal expression, affectation, conditionnelle, condition, boucle, ecrire, lire, retourner, appelFonc, facteur, atome;


start with prog;

//Le programme commence avec un bloc
prog 	::= block 
	 	;

//Un block constitue la partie "hors méthode" du programme et permet de placer chaque élément	
block	::= instruction block
		| COM block 
		|
		;

instruction ::= declarationVar
		| declarationVarLoc
		| declarationFonc
		| affectation
		| conditionnelle
		| boucle 
		| ecrire
		| lire
		| retourner
		;


//Représente la declaration d'une variable global uniquement dans le block "hors méthodes"
declarationVar ::= GLOB ENTIER parametreD PV // glob entier i; ou glob entier i,j;
		| GLOB ENTIER parametreD EG expression PV // glob entier i = x+y...
		;

//Représente la déclaration d'une variable locale 
declarationVarLoc ::= LOC ENTIER parametreD PV
		| LOC ENTIER parametreD EG expression PV
		;


//Represente les methodes du programme
declarationFonc ::= FONCTION ENTIER NOM PO parametreF PF AO block AF
			| FONCTION NOM PO parametreF PF AO block AF
			| FONCTION ENTIER NOM PO PF AO block AF
			| FONCTION NOM PO PF AO block AF
			| FONCTION PRINC PO PF AO block AF
			;	
			
//Représente les variables décrite lors de leurs déclaration (ex : "glob entier i;" OU "glob entier	i, j, k;")
parametreD ::= NOM V parametreD
			| NOM
			;


//Paramètres d'une méthode 
parametreF ::=  ENTIER NOM V parametreF 
		| ENTIER NOM
		;

//affectation d'une variable 
affectation ::= NOM EG expression PV

		;
// SI .. ALORS / SINON .. ALORS
conditionnelle ::= SI PO condition PF AO block AF
		| SI PO condition PF AO block AF SINON AO block AF
		;

// le TANT QUE ...
boucle ::= TQ PO condition PF AO block AF
		;
		
// conditions booleennes dans un SI 
condition ::= expression OPBOOL expression 
		;

//fonction écriture 
ecrire ::= ECRIRE PO expression PF PV
		;

//fonction lecture
lire ::= LIRE PO expression PF
		| LIRE PO PF
		; 


//fonction return
retourner ::= RET expression PV
		;
		
//l'appel de fonction
appelFonc ::= APPEL NOM PO parametreA PF 
		;

// les arguments d'une fonction
parametreA ::= expression V parametreA
		| expression
		|	
		;


// une expression : ici on gère les + et les - facteur est utilisé pour la priorité des opérations
expression ::= expression PLUS facteur
		| expression MOINS facteur 
		| facteur
		;
//gère les * et les /		on décompose encore plus une expression pour arriver a atome
facteur ::= facteur MUL atome 
		| facteur DIV atome 
		| atome 
		;
// tous les éléments simples , gère aussi les parenthèses 
atome ::= NOM 
		| NUM
		| PO expression PF
		| appelFonc
		;
