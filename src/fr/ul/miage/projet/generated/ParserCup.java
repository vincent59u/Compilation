
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.ul.miage.projet.generated;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\004\000\002\005\006\000\002\005" +
    "\010\000\002\006\006\000\002\006\010\000\002\007\013" +
    "\000\002\007\012\000\002\007\012\000\002\007\011\000" +
    "\002\007\011\000\002\010\005\000\002\010\003\000\002" +
    "\011\006\000\002\011\004\000\002\014\006\000\002\015" +
    "\011\000\002\015\015\000\002\017\011\000\002\016\005" +
    "\000\002\020\007\000\002\021\005\000\002\022\005\000" +
    "\002\023\007\000\002\012\005\000\002\012\003\000\002" +
    "\012\002\000\002\013\005\000\002\013\005\000\002\013" +
    "\003\000\002\024\005\000\002\024\005\000\002\024\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\005\000" +
    "\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\030\002\ufffd\004\015\005\005\007\021\011" +
    "\014\013\022\027\024\032\027\033\010\035\004\036\006" +
    "\001\002\000\014\007\034\010\033\017\044\034\040\036" +
    "\006\001\002\000\004\006\175\001\002\000\004\007\166" +
    "\001\002\000\032\002\ufff6\004\ufff6\005\ufff6\007\ufff6\011" +
    "\ufff6\013\ufff6\022\ufff6\027\ufff6\032\ufff6\033\ufff6\035\ufff6" +
    "\036\ufff6\001\002\000\004\017\162\001\002\000\032\002" +
    "\ufffb\004\ufffb\005\ufffb\007\ufffb\011\ufffb\013\ufffb\022\ufffb" +
    "\027\ufffb\032\ufffb\033\ufffb\035\ufffb\036\ufffb\001\002\000" +
    "\032\002\ufffc\004\ufffc\005\ufffc\007\ufffc\011\ufffc\013\ufffc" +
    "\022\ufffc\027\ufffc\032\ufffc\033\ufffc\035\ufffc\036\ufffc\001" +
    "\002\000\032\002\ufff7\004\ufff7\005\ufff7\007\ufff7\011\ufff7" +
    "\013\ufff7\022\ufff7\027\ufff7\032\ufff7\033\ufff7\035\ufff7\036" +
    "\ufff7\001\002\000\010\006\122\007\123\012\121\001\002" +
    "\000\032\002\ufffd\004\015\005\005\007\021\011\014\013" +
    "\022\022\ufffd\027\024\032\027\033\010\035\004\036\006" +
    "\001\002\000\004\002\117\001\002\000\032\002\ufff8\004" +
    "\ufff8\005\ufff8\007\ufff8\011\ufff8\013\ufff8\022\ufff8\027\ufff8" +
    "\032\ufff8\033\ufff8\035\ufff8\036\ufff8\001\002\000\004\002" +
    "\000\001\002\000\004\016\114\001\002\000\004\006\103" +
    "\001\002\000\004\014\102\001\002\000\004\017\070\001" +
    "\002\000\032\002\ufffd\004\015\005\005\007\021\011\014" +
    "\013\022\022\ufffd\027\024\032\027\033\010\035\004\036" +
    "\006\001\002\000\032\002\ufff5\004\ufff5\005\ufff5\007\ufff5" +
    "\011\ufff5\013\ufff5\022\ufff5\027\ufff5\032\ufff5\033\ufff5\035" +
    "\ufff5\036\ufff5\001\002\000\004\017\032\001\002\000\032" +
    "\002\ufffa\004\ufffa\005\ufffa\007\ufffa\011\ufffa\013\ufffa\022" +
    "\ufffa\027\ufffa\032\ufffa\033\ufffa\035\ufffa\036\ufffa\001\002" +
    "\000\032\002\ufff9\004\ufff9\005\ufff9\007\ufff9\011\ufff9\013" +
    "\ufff9\022\ufff9\027\ufff9\032\ufff9\033\ufff9\035\ufff9\036\ufff9" +
    "\001\002\000\014\007\034\010\033\017\044\034\040\036" +
    "\006\001\002\000\022\014\uffd3\015\uffd3\020\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\031\uffd3\001\002\000\022\014" +
    "\uffd4\015\uffd4\020\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\031\uffd4\001\002\000\022\014\uffd5\015\uffd5\020\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\031\uffd5\001\002\000\004" +
    "\020\063\001\002\000\022\014\uffd1\015\uffd1\020\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\031\uffd1\001\002\000\004" +
    "\017\061\001\002\000\022\014\uffd8\015\uffd8\020\uffd8\023" +
    "\uffd8\024\uffd8\025\052\026\053\031\uffd8\001\002\000\022" +
    "\014\uffd0\015\uffd0\020\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\031\uffd0\001\002\000\010\023\047\024\050\031\057" +
    "\001\002\000\014\007\034\010\033\017\044\034\040\036" +
    "\006\001\002\000\010\020\046\023\047\024\050\001\002" +
    "\000\022\014\uffd2\015\uffd2\020\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\031\uffd2\001\002\000\014\007\034\010\033" +
    "\017\044\034\040\036\006\001\002\000\014\007\034\010" +
    "\033\017\044\034\040\036\006\001\002\000\022\014\uffd9" +
    "\015\uffd9\020\uffd9\023\uffd9\024\uffd9\025\052\026\053\031" +
    "\uffd9\001\002\000\014\007\034\010\033\017\044\034\040" +
    "\036\006\001\002\000\014\007\034\010\033\017\044\034" +
    "\040\036\006\001\002\000\022\014\uffd6\015\uffd6\020\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\031\uffd6\001\002\000" +
    "\022\014\uffd7\015\uffd7\020\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\031\uffd7\001\002\000\022\014\uffda\015\uffda\020" +
    "\uffda\023\uffda\024\uffda\025\052\026\053\031\uffda\001\002" +
    "\000\014\007\034\010\033\017\044\034\040\036\006\001" +
    "\002\000\010\020\uffe2\023\047\024\050\001\002\000\004" +
    "\020\062\001\002\000\022\014\uffe0\015\uffe0\020\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\031\uffe0\001\002\000\004" +
    "\021\064\001\002\000\030\004\015\005\005\007\021\011" +
    "\014\013\022\022\ufffd\027\024\032\027\033\010\035\004" +
    "\036\006\001\002\000\004\022\066\001\002\000\032\002" +
    "\uffe3\004\uffe3\005\uffe3\007\uffe3\011\uffe3\013\uffe3\022\uffe3" +
    "\027\uffe3\032\uffe3\033\uffe3\035\uffe3\036\uffe3\001\002\000" +
    "\006\002\uffff\022\uffff\001\002\000\014\007\034\010\033" +
    "\017\044\034\040\036\006\001\002\000\004\020\072\001" +
    "\002\000\004\021\073\001\002\000\030\004\015\005\005" +
    "\007\021\011\014\013\022\022\ufffd\027\024\032\027\033" +
    "\010\035\004\036\006\001\002\000\004\022\075\001\002" +
    "\000\034\002\uffe5\004\uffe5\005\uffe5\007\uffe5\011\uffe5\013" +
    "\uffe5\022\uffe5\027\uffe5\030\076\032\uffe5\033\uffe5\035\uffe5" +
    "\036\uffe5\001\002\000\004\021\077\001\002\000\030\004" +
    "\015\005\005\007\021\011\014\013\022\022\ufffd\027\024" +
    "\032\027\033\010\035\004\036\006\001\002\000\004\022" +
    "\101\001\002\000\032\002\uffe4\004\uffe4\005\uffe4\007\uffe4" +
    "\011\uffe4\013\uffe4\022\uffe4\027\uffe4\032\uffe4\033\uffe4\035" +
    "\uffe4\036\uffe4\001\002\000\032\002\ufff4\004\ufff4\005\ufff4" +
    "\007\ufff4\011\ufff4\013\ufff4\022\ufff4\027\ufff4\032\ufff4\033" +
    "\ufff4\035\ufff4\036\ufff4\001\002\000\004\007\105\001\002" +
    "\000\006\014\111\016\110\001\002\000\010\014\uffe9\015" +
    "\106\016\uffe9\001\002\000\004\007\105\001\002\000\006" +
    "\014\uffea\016\uffea\001\002\000\014\007\034\010\033\017" +
    "\044\034\040\036\006\001\002\000\032\002\ufff1\004\ufff1" +
    "\005\ufff1\007\ufff1\011\ufff1\013\ufff1\022\ufff1\027\ufff1\032" +
    "\ufff1\033\ufff1\035\ufff1\036\ufff1\001\002\000\010\014\113" +
    "\023\047\024\050\001\002\000\032\002\ufff0\004\ufff0\005" +
    "\ufff0\007\ufff0\011\ufff0\013\ufff0\022\ufff0\027\ufff0\032\ufff0" +
    "\033\ufff0\035\ufff0\036\ufff0\001\002\000\014\007\034\010" +
    "\033\017\044\034\040\036\006\001\002\000\010\014\116" +
    "\023\047\024\050\001\002\000\032\002\uffe6\004\uffe6\005" +
    "\uffe6\007\uffe6\011\uffe6\013\uffe6\022\uffe6\027\uffe6\032\uffe6" +
    "\033\uffe6\035\uffe6\036\uffe6\001\002\000\004\002\001\001" +
    "\002\000\006\002\ufffe\022\ufffe\001\002\000\004\017\155" +
    "\001\002\000\004\007\142\001\002\000\004\017\124\001" +
    "\002\000\006\006\127\020\125\001\002\000\004\021\137" +
    "\001\002\000\004\020\133\001\002\000\004\007\130\001" +
    "\002\000\006\015\131\020\uffe7\001\002\000\004\006\127" +
    "\001\002\000\004\020\uffe8\001\002\000\004\021\134\001" +
    "\002\000\030\004\015\005\005\007\021\011\014\013\022" +
    "\022\ufffd\027\024\032\027\033\010\035\004\036\006\001" +
    "\002\000\004\022\136\001\002\000\032\002\uffee\004\uffee" +
    "\005\uffee\007\uffee\011\uffee\013\uffee\022\uffee\027\uffee\032" +
    "\uffee\033\uffee\035\uffee\036\uffee\001\002\000\030\004\015" +
    "\005\005\007\021\011\014\013\022\022\ufffd\027\024\032" +
    "\027\033\010\035\004\036\006\001\002\000\004\022\141" +
    "\001\002\000\032\002\uffec\004\uffec\005\uffec\007\uffec\011" +
    "\uffec\013\uffec\022\uffec\027\uffec\032\uffec\033\uffec\035\uffec" +
    "\036\uffec\001\002\000\004\017\143\001\002\000\006\006" +
    "\127\020\144\001\002\000\004\021\152\001\002\000\004" +
    "\020\146\001\002\000\004\021\147\001\002\000\030\004" +
    "\015\005\005\007\021\011\014\013\022\022\ufffd\027\024" +
    "\032\027\033\010\035\004\036\006\001\002\000\004\022" +
    "\151\001\002\000\032\002\uffef\004\uffef\005\uffef\007\uffef" +
    "\011\uffef\013\uffef\022\uffef\027\uffef\032\uffef\033\uffef\035" +
    "\uffef\036\uffef\001\002\000\030\004\015\005\005\007\021" +
    "\011\014\013\022\022\ufffd\027\024\032\027\033\010\035" +
    "\004\036\006\001\002\000\004\022\154\001\002\000\032" +
    "\002\uffed\004\uffed\005\uffed\007\uffed\011\uffed\013\uffed\022" +
    "\uffed\027\uffed\032\uffed\033\uffed\035\uffed\036\uffed\001\002" +
    "\000\004\020\156\001\002\000\004\021\157\001\002\000" +
    "\030\004\015\005\005\007\021\011\014\013\022\022\ufffd" +
    "\027\024\032\027\033\010\035\004\036\006\001\002\000" +
    "\004\022\161\001\002\000\032\002\uffeb\004\uffeb\005\uffeb" +
    "\007\uffeb\011\uffeb\013\uffeb\022\uffeb\027\uffeb\032\uffeb\033" +
    "\uffeb\035\uffeb\036\uffeb\001\002\000\014\007\034\010\033" +
    "\017\044\034\040\036\006\001\002\000\010\020\164\023" +
    "\047\024\050\001\002\000\004\014\165\001\002\000\032" +
    "\002\uffe1\004\uffe1\005\uffe1\007\uffe1\011\uffe1\013\uffe1\022" +
    "\uffe1\027\uffe1\032\uffe1\033\uffe1\035\uffe1\036\uffe1\001\002" +
    "\000\004\017\167\001\002\000\016\007\034\010\033\017" +
    "\044\020\uffdb\034\040\036\006\001\002\000\004\020\174" +
    "\001\002\000\012\015\172\020\uffdc\023\047\024\050\001" +
    "\002\000\016\007\034\010\033\017\044\020\uffdb\034\040" +
    "\036\006\001\002\000\004\020\uffdd\001\002\000\022\014" +
    "\uffde\015\uffde\020\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\031\uffde\001\002\000\004\007\105\001\002\000\006\014" +
    "\200\016\177\001\002\000\014\007\034\010\033\017\044" +
    "\034\040\036\006\001\002\000\032\002\ufff3\004\ufff3\005" +
    "\ufff3\007\ufff3\011\ufff3\013\ufff3\022\ufff3\027\ufff3\032\ufff3" +
    "\033\ufff3\035\ufff3\036\ufff3\001\002\000\010\014\202\023" +
    "\047\024\050\001\002\000\032\002\ufff2\004\ufff2\005\ufff2" +
    "\007\ufff2\011\ufff2\013\ufff2\022\ufff2\027\ufff2\032\ufff2\033" +
    "\ufff2\035\ufff2\036\ufff2\001\002\000\010\014\204\023\047" +
    "\024\050\001\002\000\032\002\uffdf\004\uffdf\005\uffdf\007" +
    "\uffdf\011\uffdf\013\uffdf\022\uffdf\027\uffdf\032\uffdf\033\uffdf" +
    "\035\uffdf\036\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\032\002\015\003\017\004\024\005\011\006" +
    "\010\007\027\014\030\015\016\017\012\020\006\022\025" +
    "\023\022\001\001\000\014\013\202\021\041\023\036\024" +
    "\040\025\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\117\004\024\005\011\006\010\007\027\014\030\015" +
    "\016\017\012\020\006\022\025\023\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\066\004\024\005\011\006\010\007\027\014" +
    "\030\015\016\017\012\020\006\022\025\023\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\013\042\016\035\021\041\023\036" +
    "\024\040\025\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\013\044\021\041\023\036\024\040" +
    "\025\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\041\023\036\024\055\025\034\001\001\000\012" +
    "\021\041\023\036\024\050\025\034\001\001\000\002\001" +
    "\001\000\010\021\041\023\036\025\054\001\001\000\010" +
    "\021\041\023\036\025\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\057\021\041" +
    "\023\036\024\040\025\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\064\004\024\005\011\006\010\007\027\014\030\015" +
    "\016\017\012\020\006\022\025\023\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\042\016\070\021\041\023\036\024\040\025\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\073\004" +
    "\024\005\011\006\010\007\027\014\030\015\016\017\012" +
    "\020\006\022\025\023\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\077\004\024" +
    "\005\011\006\010\007\027\014\030\015\016\017\012\020" +
    "\006\022\025\023\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\106\001\001" +
    "\000\002\001\001\000\014\013\111\021\041\023\036\024" +
    "\040\025\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\013\114\021\041\023\036\024" +
    "\040\025\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\134\004\024\005\011\006" +
    "\010\007\027\014\030\015\016\017\012\020\006\022\025" +
    "\023\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\137\004\024\005\011\006\010\007\027\014\030" +
    "\015\016\017\012\020\006\022\025\023\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\147\004\024\005\011\006\010" +
    "\007\027\014\030\015\016\017\012\020\006\022\025\023" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\152\004\024\005\011\006\010\007\027\014\030\015" +
    "\016\017\012\020\006\022\025\023\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\157\004\024\005\011\006\010\007\027" +
    "\014\030\015\016\017\012\020\006\022\025\023\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\162" +
    "\021\041\023\036\024\040\025\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\167\013\170\021\041\023\036\024\040\025" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\172\013\170\021\041\023\036\024\040\025\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\175" +
    "\001\001\000\002\001\001\000\014\013\200\021\041\023" +
    "\036\024\040\025\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= instruction block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= COM block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= declarationVar 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= declarationVarLoc 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= declarationFonc 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= affectation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= conditionnelle 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= boucle 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= ecrire 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= retourner 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= appelFonc PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declarationVar ::= GLOB ENTIER parametreD PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationVar",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarationVar ::= GLOB ENTIER parametreD EG expression PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationVar",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarationVarLoc ::= LOC ENTIER parametreD PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationVarLoc",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarationVarLoc ::= LOC ENTIER parametreD EG expression PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationVarLoc",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarationFonc ::= FONCTION ENTIER NOM PO parametreF PF AO block AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationFonc",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarationFonc ::= FONCTION NOM PO parametreF PF AO block AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationFonc",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarationFonc ::= FONCTION ENTIER NOM PO PF AO block AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationFonc",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarationFonc ::= FONCTION NOM PO PF AO block AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationFonc",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarationFonc ::= FONCTION PRINC PO PF AO block AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationFonc",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametreD ::= NOM V parametreD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreD",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametreD ::= NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreD",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametreF ::= ENTIER NOM V parametreF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreF",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametreF ::= ENTIER NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreF",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // affectation ::= NOM EG expression PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // conditionnelle ::= SI PO condition PF AO block AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // conditionnelle ::= SI PO condition PF AO block AF SINON AO block AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // boucle ::= TQ PO condition PF AO block AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("boucle",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condition ::= expression OPBOOL expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ecrire ::= ECRIRE PO expression PF PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ecrire",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lire ::= LIRE PO PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lire",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // retourner ::= RET expression PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retourner",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // appelFonc ::= APPEL NOM PO parametreA PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appelFonc",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametreA ::= expression V parametreA 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametreA ::= expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametreA ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression PLUS facteur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression MOINS facteur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= facteur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // facteur ::= facteur MUL atome 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // facteur ::= facteur DIV atome 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // facteur ::= atome 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // atome ::= NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atome ::= NUM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atome ::= PO expression PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // atome ::= appelFonc 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // atome ::= lire 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
