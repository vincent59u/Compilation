
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.ul.miage.projet.generated;

import fr.ul.miage.projet.compilateur.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\003\000\002\025" +
    "\003\000\002\007\004\000\002\007\004\000\002\007\002" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\004\000\002\003" +
    "\006\000\002\003\010\000\002\004\006\000\002\004\010" +
    "\000\002\005\013\000\002\005\012\000\002\005\012\000" +
    "\002\005\011\000\002\005\011\000\002\010\005\000\002" +
    "\010\003\000\002\011\006\000\002\011\004\000\002\024" +
    "\006\000\002\016\011\000\002\016\015\000\002\020\011" +
    "\000\002\017\005\000\002\021\007\000\002\022\005\000" +
    "\002\023\007\000\002\012\005\000\002\012\003\000\002" +
    "\012\002\000\002\015\005\000\002\015\005\000\002\015" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\005\000" +
    "\002\014\003\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\030\002\ufffc\004\016\005\005\007\015\011" +
    "\023\025\025\027\027\030\010\032\004\033\007\035\022" +
    "\001\002\000\014\015\044\031\041\033\007\035\035\036" +
    "\034\001\002\000\004\006\175\001\002\000\032\002\ufff5" +
    "\004\ufff5\005\ufff5\007\ufff5\011\ufff5\020\ufff5\025\ufff5\027" +
    "\ufff5\030\ufff5\032\ufff5\033\ufff5\035\ufff5\001\002\000\004" +
    "\035\166\001\002\000\004\015\162\001\002\000\004\002" +
    "\161\001\002\000\032\002\ufffa\004\ufffa\005\ufffa\007\ufffa" +
    "\011\ufffa\020\ufffa\025\ufffa\027\ufffa\030\ufffa\032\ufffa\033" +
    "\ufffa\035\ufffa\001\002\000\032\002\ufffb\004\ufffb\005\ufffb" +
    "\007\ufffb\011\ufffb\020\ufffb\025\ufffb\027\ufffb\030\ufffb\032" +
    "\ufffb\033\ufffb\035\ufffb\001\002\000\032\002\ufff6\004\ufff6" +
    "\005\ufff6\007\ufff6\011\ufff6\020\ufff6\025\ufff6\027\ufff6\030" +
    "\ufff6\032\ufff6\033\ufff6\035\ufff6\001\002\000\010\006\121" +
    "\010\120\035\122\001\002\000\032\002\ufffc\004\016\005" +
    "\005\007\015\011\023\020\ufffc\025\025\027\027\030\010" +
    "\032\004\033\007\035\022\001\002\000\032\002\ufff7\004" +
    "\ufff7\005\ufff7\007\ufff7\011\ufff7\020\ufff7\025\ufff7\027\ufff7" +
    "\030\ufff7\032\ufff7\033\ufff7\035\ufff7\001\002\000\004\002" +
    "\000\001\002\000\004\002\uffff\001\002\000\004\014\114" +
    "\001\002\000\004\006\103\001\002\000\004\012\102\001" +
    "\002\000\004\015\070\001\002\000\032\002\ufffc\004\016" +
    "\005\005\007\015\011\023\020\ufffc\025\025\027\027\030" +
    "\010\032\004\033\007\035\022\001\002\000\004\015\033" +
    "\001\002\000\032\002\ufff4\004\ufff4\005\ufff4\007\ufff4\011" +
    "\ufff4\020\ufff4\025\ufff4\027\ufff4\030\ufff4\032\ufff4\033\ufff4" +
    "\035\ufff4\001\002\000\032\002\ufff8\004\ufff8\005\ufff8\007" +
    "\ufff8\011\ufff8\020\ufff8\025\ufff8\027\ufff8\030\ufff8\032\ufff8" +
    "\033\ufff8\035\ufff8\001\002\000\032\002\ufff9\004\ufff9\005" +
    "\ufff9\007\ufff9\011\ufff9\020\ufff9\025\ufff9\027\ufff9\030\ufff9" +
    "\032\ufff9\033\ufff9\035\ufff9\001\002\000\014\015\044\031" +
    "\041\033\007\035\035\036\034\001\002\000\022\012\uffd3" +
    "\013\uffd3\016\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\034" +
    "\uffd3\001\002\000\022\012\uffd4\013\uffd4\016\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\034\uffd4\001\002\000\022\012" +
    "\uffd5\013\uffd5\016\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\034\uffd5\001\002\000\004\016\063\001\002\000\022\012" +
    "\uffd1\013\uffd1\016\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\034\uffd1\001\002\000\004\015\061\001\002\000\022\012" +
    "\uffd8\013\uffd8\016\uffd8\021\uffd8\022\uffd8\023\052\024\053" +
    "\034\uffd8\001\002\000\010\021\047\022\050\034\057\001" +
    "\002\000\014\015\044\031\041\033\007\035\035\036\034" +
    "\001\002\000\010\016\046\021\047\022\050\001\002\000" +
    "\022\012\uffd2\013\uffd2\016\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\034\uffd2\001\002\000\014\015\044\031\041\033" +
    "\007\035\035\036\034\001\002\000\014\015\044\031\041" +
    "\033\007\035\035\036\034\001\002\000\022\012\uffd9\013" +
    "\uffd9\016\uffd9\021\uffd9\022\uffd9\023\052\024\053\034\uffd9" +
    "\001\002\000\014\015\044\031\041\033\007\035\035\036" +
    "\034\001\002\000\014\015\044\031\041\033\007\035\035" +
    "\036\034\001\002\000\022\012\uffd6\013\uffd6\016\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\034\uffd6\001\002\000\022" +
    "\012\uffd7\013\uffd7\016\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\034\uffd7\001\002\000\022\012\uffda\013\uffda\016\uffda" +
    "\021\uffda\022\uffda\023\052\024\053\034\uffda\001\002\000" +
    "\014\015\044\031\041\033\007\035\035\036\034\001\002" +
    "\000\010\016\uffe1\021\047\022\050\001\002\000\004\016" +
    "\062\001\002\000\022\012\uffd0\013\uffd0\016\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\034\uffd0\001\002\000\004\017" +
    "\064\001\002\000\030\004\016\005\005\007\015\011\023" +
    "\020\ufffc\025\025\027\027\030\010\032\004\033\007\035" +
    "\022\001\002\000\004\020\066\001\002\000\032\002\uffe2" +
    "\004\uffe2\005\uffe2\007\uffe2\011\uffe2\020\uffe2\025\uffe2\027" +
    "\uffe2\030\uffe2\032\uffe2\033\uffe2\035\uffe2\001\002\000\006" +
    "\002\ufffe\020\ufffe\001\002\000\014\015\044\031\041\033" +
    "\007\035\035\036\034\001\002\000\004\016\072\001\002" +
    "\000\004\017\073\001\002\000\030\004\016\005\005\007" +
    "\015\011\023\020\ufffc\025\025\027\027\030\010\032\004" +
    "\033\007\035\022\001\002\000\004\020\075\001\002\000" +
    "\034\002\uffe4\004\uffe4\005\uffe4\007\uffe4\011\uffe4\020\uffe4" +
    "\025\uffe4\026\076\027\uffe4\030\uffe4\032\uffe4\033\uffe4\035" +
    "\uffe4\001\002\000\004\017\077\001\002\000\030\004\016" +
    "\005\005\007\015\011\023\020\ufffc\025\025\027\027\030" +
    "\010\032\004\033\007\035\022\001\002\000\004\020\101" +
    "\001\002\000\032\002\uffe3\004\uffe3\005\uffe3\007\uffe3\011" +
    "\uffe3\020\uffe3\025\uffe3\027\uffe3\030\uffe3\032\uffe3\033\uffe3" +
    "\035\uffe3\001\002\000\032\002\ufff3\004\ufff3\005\ufff3\007" +
    "\ufff3\011\ufff3\020\ufff3\025\ufff3\027\ufff3\030\ufff3\032\ufff3" +
    "\033\ufff3\035\ufff3\001\002\000\004\035\105\001\002\000" +
    "\006\012\111\014\110\001\002\000\010\012\uffe8\013\106" +
    "\014\uffe8\001\002\000\004\035\105\001\002\000\006\012" +
    "\uffe9\014\uffe9\001\002\000\014\015\044\031\041\033\007" +
    "\035\035\036\034\001\002\000\032\002\ufff0\004\ufff0\005" +
    "\ufff0\007\ufff0\011\ufff0\020\ufff0\025\ufff0\027\ufff0\030\ufff0" +
    "\032\ufff0\033\ufff0\035\ufff0\001\002\000\010\012\113\021" +
    "\047\022\050\001\002\000\032\002\uffef\004\uffef\005\uffef" +
    "\007\uffef\011\uffef\020\uffef\025\uffef\027\uffef\030\uffef\032" +
    "\uffef\033\uffef\035\uffef\001\002\000\014\015\044\031\041" +
    "\033\007\035\035\036\034\001\002\000\010\012\116\021" +
    "\047\022\050\001\002\000\032\002\uffe5\004\uffe5\005\uffe5" +
    "\007\uffe5\011\uffe5\020\uffe5\025\uffe5\027\uffe5\030\uffe5\032" +
    "\uffe5\033\uffe5\035\uffe5\001\002\000\006\002\ufffd\020\ufffd" +
    "\001\002\000\004\015\154\001\002\000\004\035\141\001" +
    "\002\000\004\015\123\001\002\000\006\006\126\016\124" +
    "\001\002\000\004\017\136\001\002\000\004\016\132\001" +
    "\002\000\004\035\127\001\002\000\006\013\130\016\uffe6" +
    "\001\002\000\004\006\126\001\002\000\004\016\uffe7\001" +
    "\002\000\004\017\133\001\002\000\030\004\016\005\005" +
    "\007\015\011\023\020\ufffc\025\025\027\027\030\010\032" +
    "\004\033\007\035\022\001\002\000\004\020\135\001\002" +
    "\000\032\002\uffed\004\uffed\005\uffed\007\uffed\011\uffed\020" +
    "\uffed\025\uffed\027\uffed\030\uffed\032\uffed\033\uffed\035\uffed" +
    "\001\002\000\030\004\016\005\005\007\015\011\023\020" +
    "\ufffc\025\025\027\027\030\010\032\004\033\007\035\022" +
    "\001\002\000\004\020\140\001\002\000\032\002\uffeb\004" +
    "\uffeb\005\uffeb\007\uffeb\011\uffeb\020\uffeb\025\uffeb\027\uffeb" +
    "\030\uffeb\032\uffeb\033\uffeb\035\uffeb\001\002\000\004\015" +
    "\142\001\002\000\006\006\126\016\143\001\002\000\004" +
    "\017\151\001\002\000\004\016\145\001\002\000\004\017" +
    "\146\001\002\000\030\004\016\005\005\007\015\011\023" +
    "\020\ufffc\025\025\027\027\030\010\032\004\033\007\035" +
    "\022\001\002\000\004\020\150\001\002\000\032\002\uffee" +
    "\004\uffee\005\uffee\007\uffee\011\uffee\020\uffee\025\uffee\027" +
    "\uffee\030\uffee\032\uffee\033\uffee\035\uffee\001\002\000\030" +
    "\004\016\005\005\007\015\011\023\020\ufffc\025\025\027" +
    "\027\030\010\032\004\033\007\035\022\001\002\000\004" +
    "\020\153\001\002\000\032\002\uffec\004\uffec\005\uffec\007" +
    "\uffec\011\uffec\020\uffec\025\uffec\027\uffec\030\uffec\032\uffec" +
    "\033\uffec\035\uffec\001\002\000\004\016\155\001\002\000" +
    "\004\017\156\001\002\000\030\004\016\005\005\007\015" +
    "\011\023\020\ufffc\025\025\027\027\030\010\032\004\033" +
    "\007\035\022\001\002\000\004\020\160\001\002\000\032" +
    "\002\uffea\004\uffea\005\uffea\007\uffea\011\uffea\020\uffea\025" +
    "\uffea\027\uffea\030\uffea\032\uffea\033\uffea\035\uffea\001\002" +
    "\000\004\002\001\001\002\000\014\015\044\031\041\033" +
    "\007\035\035\036\034\001\002\000\010\016\164\021\047" +
    "\022\050\001\002\000\004\012\165\001\002\000\032\002" +
    "\uffe0\004\uffe0\005\uffe0\007\uffe0\011\uffe0\020\uffe0\025\uffe0" +
    "\027\uffe0\030\uffe0\032\uffe0\033\uffe0\035\uffe0\001\002\000" +
    "\004\015\167\001\002\000\016\015\044\016\uffdb\031\041" +
    "\033\007\035\035\036\034\001\002\000\004\016\174\001" +
    "\002\000\012\013\172\016\uffdc\021\047\022\050\001\002" +
    "\000\016\015\044\016\uffdb\031\041\033\007\035\035\036" +
    "\034\001\002\000\004\016\uffdd\001\002\000\022\012\uffde" +
    "\013\uffde\016\uffde\021\uffde\022\uffde\023\uffde\024\uffde\034" +
    "\uffde\001\002\000\004\035\105\001\002\000\006\012\200" +
    "\014\177\001\002\000\014\015\044\031\041\033\007\035" +
    "\035\036\034\001\002\000\032\002\ufff2\004\ufff2\005\ufff2" +
    "\007\ufff2\011\ufff2\020\ufff2\025\ufff2\027\ufff2\030\ufff2\032" +
    "\ufff2\033\ufff2\035\ufff2\001\002\000\010\012\202\021\047" +
    "\022\050\001\002\000\032\002\ufff1\004\ufff1\005\ufff1\007" +
    "\ufff1\011\ufff1\020\ufff1\025\ufff1\027\ufff1\030\ufff1\032\ufff1" +
    "\033\ufff1\035\ufff1\001\002\000\010\012\204\021\047\022" +
    "\050\001\002\000\032\002\uffdf\004\uffdf\005\uffdf\007\uffdf" +
    "\011\uffdf\020\uffdf\025\uffdf\027\uffdf\030\uffdf\032\uffdf\033" +
    "\uffdf\035\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\034\002\010\003\012\004\011\005\031\006" +
    "\025\007\020\016\016\020\013\021\005\022\027\023\023" +
    "\024\030\025\017\001\001\000\012\013\041\014\035\015" +
    "\202\023\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\012\004\011\005\031\006\025\007" +
    "\116\016\016\020\013\021\005\022\027\023\023\024\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\012\004\011\005\031\006" +
    "\025\007\066\016\016\020\013\021\005\022\027\023\023" +
    "\024\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\041\014\035" +
    "\015\042\017\036\023\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\041\014\035\015\044\023\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\055\014" +
    "\035\023\037\001\001\000\010\013\050\014\035\023\037" +
    "\001\001\000\002\001\001\000\006\014\054\023\037\001" +
    "\001\000\006\014\053\023\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\041\014" +
    "\035\015\057\023\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\012\004\011\005\031\006\025\007\064\016\016\020\013" +
    "\021\005\022\027\023\023\024\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\041" +
    "\014\035\015\042\017\070\023\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\012\004\011\005\031" +
    "\006\025\007\073\016\016\020\013\021\005\022\027\023" +
    "\023\024\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\012\004\011\005\031\006" +
    "\025\007\077\016\016\020\013\021\005\022\027\023\023" +
    "\024\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\106\001\001\000\002\001" +
    "\001\000\012\013\041\014\035\015\111\023\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\041\014\035\015\114\023\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\012\004\011\005" +
    "\031\006\025\007\133\016\016\020\013\021\005\022\027" +
    "\023\023\024\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\012\004\011\005\031\006\025\007\136" +
    "\016\016\020\013\021\005\022\027\023\023\024\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\012\004\011\005\031" +
    "\006\025\007\146\016\016\020\013\021\005\022\027\023" +
    "\023\024\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\012\004\011\005\031\006\025\007\151\016" +
    "\016\020\013\021\005\022\027\023\023\024\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\012\004\011\005\031\006\025" +
    "\007\156\016\016\020\013\021\005\022\027\023\023\024" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\041\014\035\015\162\023\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\167\013\041\014\035\015" +
    "\170\023\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\172\013\041\014\035\015\170\023\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\175" +
    "\001\001\000\002\001\001\000\012\013\041\014\035\015" +
    "\200\023\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {

//@@CUPDBG0

	TableDesSymboles tds = new TableDesSymboles();

  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= compil EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // compil ::= prog 
            {
              Object RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud prog = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG1
 
				if(prog.verifierStructure()){
					Compilateur comp = new Compilateur(tds, prog);
					comp.genererUASM();
				}else{
					System.err.println("L'arbre n'a pas été construit correctement");
				}
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compil",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= block 
            {
              Noeud RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<Noeud> block = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG2
 Noeud prog = new Noeud ("",Type.PROG,null);
						prog.ajoutFils(block);
						RESULT = prog;  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= instruction block 
            {
              ArrayList<Noeud> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Noeud> instruction = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<Noeud> block = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG3
 RESULT = new ArrayList<Noeud>(); 
												((ArrayList<Noeud>)RESULT).addAll(instruction);
												((ArrayList<Noeud>)RESULT).addAll(block);  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= COM block 
            {
              ArrayList<Noeud> RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<Noeud> block = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG4
 RESULT = new ArrayList<Noeud>();
												((ArrayList<Noeud>)RESULT).addAll(block); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= 
            {
              ArrayList<Noeud> RESULT =null;
		//@@CUPDBG5
 RESULT = new ArrayList<Noeud>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= declarationVar 
            {
              ArrayList<Noeud> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<Noeud> var = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG6
 RESULT = var; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= declarationVarLoc 
            {
              ArrayList<Noeud> RESULT =null;
		int varLocleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int varLocright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<Noeud> varLoc = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG7
 RESULT = varLoc; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= declarationFonc 
            {
              ArrayList<Noeud> RESULT =null;
		int fonctionleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fonctionright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<Noeud> fonction = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG8
 RESULT = fonction; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= affectation 
            {
              ArrayList<Noeud> RESULT =null;
		int affectleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int affectright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud affect = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG9
 ArrayList<Noeud> intermed = new ArrayList<Noeud>();
									intermed.add(affect);
									RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= conditionnelle 
            {
              ArrayList<Noeud> RESULT =null;
		int conditleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int conditright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud condit = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG10
 ArrayList<Noeud> intermed = new ArrayList<Noeud>();
									intermed.add(condit);
									RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= boucle 
            {
              ArrayList<Noeud> RESULT =null;
		int boucleleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int boucleright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud boucle = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG11
 ArrayList<Noeud> intermed = new ArrayList<Noeud>();
									intermed.add(boucle);
									RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= ecrire 
            {
              ArrayList<Noeud> RESULT =null;
		int ecrireleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int ecrireright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud ecrire = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG12
 ArrayList<Noeud> intermed = new ArrayList<Noeud>();
									intermed.add(ecrire);
									RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= retourner 
            {
              ArrayList<Noeud> RESULT =null;
		int retournerleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int retournerright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud retourner = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG13
 ArrayList<Noeud> intermed = new ArrayList<Noeud>();
									intermed.add(retourner);
									RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= appelFonc PV 
            {
              ArrayList<Noeud> RESULT =null;
		int appelleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int appelright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud appel = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG14
 ArrayList<Noeud> intermed = new ArrayList<Noeud>();
									intermed.add(appel);
									RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarationVar ::= GLOB ENTIER parametreD PV 
            {
              ArrayList<Noeud> RESULT =null;
		int paramDleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int paramDright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Noeud> paramD = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG15
 for(Noeud n : paramD) { 
															tds.ajouterSymbole(new Symbole(n.getNom(),Scope.GLOB)); 
														} 
														RESULT = paramD; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationVar",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarationVar ::= GLOB ENTIER parametreD EG expression PV 
            {
              ArrayList<Noeud> RESULT =null;
		int paramDleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int paramDright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		ArrayList<Noeud> paramD = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud expr = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG16
 	ArrayList<Noeud> intermed = new ArrayList<Noeud>();
																for(Noeud n : paramD) { 
																	tds.ajouterSymbole(new Symbole(n.getNom(),Scope.GLOB));  
																	Noeud egal = new Noeud("",Type.EGAL,null);
																	egal.ajoutFils(n);
																	egal.ajoutFils(expr);
																	intermed.add(egal);
																	}
																RESULT = intermed; 
																
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationVar",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarationVarLoc ::= LOC ENTIER parametreD PV 
            {
              ArrayList<Noeud> RESULT =null;
		int paramDleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int paramDright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Noeud> paramD = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG17
 for(Noeud n : paramD) { 
																tds.ajouterSymbole(new Symbole(n.getNom(),Scope.LOC)); 
															} 
															RESULT = paramD; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationVarLoc",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarationVarLoc ::= LOC ENTIER parametreD EG expression PV 
            {
              ArrayList<Noeud> RESULT =null;
		int paramDleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int paramDright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		ArrayList<Noeud> paramD = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud expr = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG18
 ArrayList<Noeud> intermed = new ArrayList<Noeud>();
																for(Noeud n : paramD) { 
																	tds.ajouterSymbole(new Symbole(n.getNom(),Scope.LOC)); 
																	Noeud egal = new Noeud("",Type.EGAL,null);
																	egal.ajoutFils(n);
																	egal.ajoutFils(expr);
																	intermed.add(egal);
																}
																RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationVarLoc",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarationFonc ::= FONCTION ENTIER NOM PO parametreF PF AO block AF 
            {
              ArrayList<Noeud> RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int paramFleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int paramFright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		ArrayList<Noeud> paramF = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Noeud> block = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG19
 Noeud f = new Noeud (nom,Type.FONCT,null);
																					tds.ajouterSymbole(new Symbole(nom,Scope.FONCT));
																			f.ajoutFils(block);
																			ArrayList<Noeud> intermed = new ArrayList<Noeud>();
																			intermed.addAll(paramF);
																			intermed.add(f);
																			RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationFonc",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarationFonc ::= FONCTION NOM PO parametreF PF AO block AF 
            {
              ArrayList<Noeud> RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int paramFleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int paramFright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		ArrayList<Noeud> paramF = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Noeud> block = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG20
 Noeud f = new Noeud (nom,Type.FONCT,null);
																		tds.ajouterSymbole(new Symbole(nom,Scope.FONCT));
																		f.ajoutFils(block);
																		ArrayList<Noeud> intermed = new ArrayList<Noeud>();
																		intermed.addAll(paramF);
																		intermed.add(f);
																		RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationFonc",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarationFonc ::= FONCTION ENTIER NOM PO PF AO block AF 
            {
              ArrayList<Noeud> RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Noeud> block = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG21
 Noeud f = new Noeud (nom,Type.FONCT,null);
																		tds.ajouterSymbole(new Symbole(nom,Scope.FONCT));
																		f.ajoutFils(block);
																		ArrayList<Noeud> intermed = new ArrayList<Noeud>();
																		intermed.add(f);
																		RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationFonc",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarationFonc ::= FONCTION NOM PO PF AO block AF 
            {
              ArrayList<Noeud> RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Noeud> block = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG22
 Noeud f = new Noeud (nom,Type.FONCT,null);
																		tds.ajouterSymbole(new Symbole(nom,Scope.FONCT));
																		f.ajoutFils(block);
																		ArrayList<Noeud> intermed = new ArrayList<Noeud>();
																		intermed.add(f);
																		RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationFonc",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declarationFonc ::= FONCTION PRINC PO PF AO block AF 
            {
              ArrayList<Noeud> RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Noeud> block = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG23
 Noeud f = new Noeud ("principale",Type.PRINC,null);
																		tds.ajouterSymbole(new Symbole("principale",Scope.PRINC));
																		f.ajoutFils(block);
																		ArrayList<Noeud> intermed = new ArrayList<Noeud>();
																		intermed.add(f);
																		RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationFonc",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametreD ::= NOM V parametreD 
            {
              ArrayList<Noeud> RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int paramDleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int paramDright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<Noeud> paramD = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG24
 ArrayList<Noeud> intermed = new ArrayList<Noeud>(); 
											intermed.add(new Noeud(nom,Type.VAR,0));
											intermed.addAll(paramD); 
											RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreD",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametreD ::= NOM 
            {
              ArrayList<Noeud> RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG25
 ArrayList<Noeud> intermed = new ArrayList<Noeud>();  
											intermed.add(new Noeud(nom,Type.VAR,0));
											RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreD",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametreF ::= ENTIER NOM V parametreF 
            {
              ArrayList<Noeud> RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int paramFleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int paramFright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<Noeud> paramF = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG26
 ArrayList<Noeud> intermed = new ArrayList<Noeud>(); 
													tds.ajouterSymbole(new Symbole(nom,Scope.LOC)); 
													intermed.add(new Noeud(nom,Type.VAR,0));
													intermed.addAll(paramF); 
													RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreF",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametreF ::= ENTIER NOM 
            {
              ArrayList<Noeud> RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG27
 ArrayList<Noeud> intermed = new ArrayList<Noeud>();
											tds.ajouterSymbole(new Symbole(nom,Scope.LOC));  
											intermed.add(new Noeud(nom,Type.VAR,0));
											RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreF",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // affectation ::= NOM EG expression PV 
            {
              Noeud RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud expr = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG28
 Noeud egal = new Noeud("",Type.EGAL,null);
												egal.ajoutFils(new Noeud(nom,Type.VAR,0));
												egal.ajoutFils(expr);
												RESULT = egal; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // conditionnelle ::= SI PO condition PF AO block AF 
            {
              Noeud RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Noeud condition = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Noeud> block = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG29
 Noeud si = new Noeud("",Type.SI,null);
																	si.ajoutFils(condition);
																	si.ajoutFils(block);
																	RESULT = si; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // conditionnelle ::= SI PO condition PF AO block AF SINON AO block AF 
            {
              Noeud RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		Noeud condition = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int block1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int block1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		ArrayList<Noeud> block1 = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int block2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int block2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Noeud> block2 = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG30
 Noeud si = new Noeud("",Type.SI,null);
																						si.ajoutFils(condition);
																						si.ajoutFils(block1);
																						si.ajoutFils(new Noeud("",Type.SINON,null));
																						si.ajoutFils(block2);
																						RESULT = si;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // boucle ::= TQ PO condition PF AO block AF 
            {
              Noeud RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Noeud condition = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Noeud> block = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG31
 Noeud boucle = new Noeud("",Type.TANTQUE,null);
															boucle.ajoutFils(condition);
															boucle.ajoutFils(block);
															RESULT = boucle;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("boucle",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condition ::= expression OPBOOL expression 
            {
              Noeud RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud expr1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud expr2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG32
 Noeud opbool = new Noeud(op,Type.CONDITION,null);
															opbool.ajoutFils(expr1);
															opbool.ajoutFils(expr2);
															RESULT = opbool; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ecrire ::= ECRIRE PO expression PF PV 
            {
              Noeud RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud expr = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		//@@CUPDBG33
 Noeud ecrire = new Noeud("",Type.ECRIRE,null);
											ecrire.ajoutFils(expr);
											RESULT = ecrire; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ecrire",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // retourner ::= RET expression PV 
            {
              Noeud RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud expr = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG34
 Noeud retour = new Noeud("",Type.RETURN,null);
											retour.ajoutFils(expr); 
											RESULT = retour; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retourner",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // appelFonc ::= APPEL NOM PO parametreA PF 
            {
              Noeud RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int paramAleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int paramAright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Noeud> paramA = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG35
 Noeud appel = new Noeud (nom,Type.APPEL,null);
													appel.ajoutFils(paramA);
													RESULT = appel; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appelFonc",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametreA ::= expression V parametreA 
            {
              ArrayList<Noeud> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud expr = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int paramAleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int paramAright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<Noeud> paramA = (ArrayList<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG36
 ArrayList<Noeud> intermed = new ArrayList<Noeud>(); 
														intermed.add(expr);
														intermed.addAll(paramA);
														RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametreA ::= expression 
            {
              ArrayList<Noeud> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud expr = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG37
 ArrayList<Noeud> intermed = new ArrayList<Noeud>();  
														intermed.add(expr);
														RESULT = intermed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametreA ::= 
            {
              ArrayList<Noeud> RESULT =null;
		//@@CUPDBG38
 RESULT = new ArrayList<Noeud>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression PLUS facteur 
            {
              Noeud RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud expr = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int facteurleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int facteurright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud facteur = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG39
 Noeud plus = new Noeud(null,Type.ADD,null);
													plus.ajoutFils((Noeud)expr);
													plus.ajoutFils((Noeud)facteur);
													RESULT = plus; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression MOINS facteur 
            {
              Noeud RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud expr = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int facteurleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int facteurright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud facteur = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG40
 Noeud moins = new Noeud(null,Type.MOINS,null);
													moins.ajoutFils((Noeud)expr);
													moins.ajoutFils((Noeud)facteur);
													RESULT = moins; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= facteur 
            {
              Noeud RESULT =null;
		int facteurleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int facteurright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud facteur = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG41
 RESULT = (Noeud)facteur; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // facteur ::= facteur MUL atome 
            {
              Noeud RESULT =null;
		int facteurleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int facteurright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud facteur = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG42
 Noeud mul = new Noeud(null,Type.MUL,null);
											mul.ajoutFils(facteur);
											mul.ajoutFils(a);
											RESULT = mul; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // facteur ::= facteur DIV atome 
            {
              Noeud RESULT =null;
		int facteurleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int facteurright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud facteur = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG43
 Noeud div = new Noeud(null,Type.DIV,null);
											div.ajoutFils(facteur);
											div.ajoutFils(a);
											RESULT = div; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // facteur ::= atome 
            {
              Noeud RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG44
 RESULT = (Noeud)a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // atome ::= NOM 
            {
              Noeud RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG45
 RESULT = new Noeud (nom,Type.VAR,null); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atome ::= NUM 
            {
              Noeud RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG46
 RESULT = new Noeud (null,Type.CONSTANTE, Integer.parseInt(num)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atome ::= PO expression PF 
            {
              Noeud RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud expr = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG47
 RESULT = expr; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // atome ::= appelFonc 
            {
              Noeud RESULT =null;
		int appelleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int appelright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud appel = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG48
 RESULT = appel; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // atome ::= LIRE PO PF 
            {
              Noeud RESULT =null;
		//@@CUPDBG49
 RESULT = new Noeud("lire",Type.LIRE,null); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
