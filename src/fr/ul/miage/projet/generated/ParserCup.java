
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.ul.miage.projet.generated;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\007\010\000\002\007\010\000\002\007\006\000\002" +
    "\023\005\000\002\023\003\000\002\010\003\000\002\010" +
    "\003\000\002\014\005\000\002\014\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\014\005\000\002\014\005\000\002\014\007\000\002" +
    "\014\005\000\002\014\005\000\002\014\003\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\006\006\000\002\006\006\000" +
    "\002\004\011\000\002\016\013\000\002\016\012\000\002" +
    "\017\005\000\002\017\003\000\002\017\004\000\002\017" +
    "\006\000\002\017\005\000\002\017\003\000\002\017\002" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\003\000\002\005\002\000\002\020" +
    "\010\000\002\020\010\000\002\020\006\000\002\012\011" +
    "\000\002\012\015\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\024\011\000\002" +
    "\025\007\000\002\025\007\000\002\011\005\000\002\011" +
    "\005\000\002\021\007\000\002\021\006\000\002\022\005" +
    "\000\002\022\003\000\002\022\005\000\002\022\003\000" +
    "\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\016\004\020\005\013\016\016\032\021\035" +
    "\006\037\004\001\002\000\004\010\250\001\002\000\016" +
    "\004\020\005\013\016\016\032\021\035\006\037\004\001" +
    "\002\000\004\010\241\001\002\000\004\002\ufff9\001\002" +
    "\000\016\004\020\005\013\016\016\032\021\035\006\037" +
    "\004\001\002\000\004\002\000\001\002\000\016\004\020" +
    "\005\013\016\016\032\021\035\006\037\004\001\002\000" +
    "\010\006\200\020\201\021\202\001\002\000\004\002\177" +
    "\001\002\000\016\004\020\005\013\016\016\032\021\035" +
    "\006\037\004\001\002\000\004\020\166\001\002\000\016" +
    "\004\020\005\013\016\016\032\021\035\006\037\004\001" +
    "\002\000\016\004\020\005\013\016\016\032\021\035\006" +
    "\037\004\001\002\000\004\010\022\001\002\000\020\010" +
    "\033\013\030\021\025\022\024\027\023\031\032\036\031" +
    "\001\002\000\054\004\ufff0\007\ufff0\010\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\017\ufff0\021\ufff0\022\ufff0\023\042\024\044" +
    "\025\045\026\043\027\ufff0\030\ufff0\031\ufff0\032\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\001\002\000\054\004\ufff3" +
    "\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\017\ufff3\021" +
    "\ufff3\022\ufff3\023\042\024\044\025\045\026\043\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\034\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\001\002\000\054\004\ufff2\007\ufff2\010\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\017\ufff2\021\ufff2\022\ufff2\023\042\024" +
    "\044\025\045\026\043\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\001\002\000\004\007" +
    "\104\001\002\000\004\034\101\001\002\000\044\004\uffe5" +
    "\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5\017\uffe5\021" +
    "\uffe5\022\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\001\002\000\054\004\uffe6\007" +
    "\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\017\uffe6\021\uffe6" +
    "\022\uffe6\023\042\024\044\025\045\026\043\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\001\002\000\004\021\063\001\002\000\020\010\033\013" +
    "\030\021\047\022\046\027\023\031\032\036\031\001\002" +
    "\000\054\004\uffec\007\uffec\010\uffec\012\uffec\013\uffec\014" +
    "\uffec\017\uffec\021\uffec\022\uffec\023\042\024\044\025\045" +
    "\026\043\027\uffec\030\uffec\031\uffec\032\uffec\034\uffec\035" +
    "\uffec\036\uffec\037\uffec\001\002\000\004\034\036\001\002" +
    "\000\020\010\033\013\030\021\025\022\024\027\023\031" +
    "\032\036\031\001\002\000\004\007\uffc5\001\002\000\004" +
    "\007\uffc6\001\002\000\020\010\033\013\030\021\047\022" +
    "\046\027\023\031\032\036\031\001\002\000\020\010\uffe4" +
    "\013\uffe4\021\uffe4\022\uffe4\027\uffe4\031\uffe4\036\uffe4\001" +
    "\002\000\020\010\uffe2\013\uffe2\021\uffe2\022\uffe2\027\uffe2" +
    "\031\uffe2\036\uffe2\001\002\000\020\010\uffe3\013\uffe3\021" +
    "\uffe3\022\uffe3\027\uffe3\031\uffe3\036\uffe3\001\002\000\020" +
    "\010\uffe1\013\uffe1\021\uffe1\022\uffe1\027\uffe1\031\uffe1\036" +
    "\uffe1\001\002\000\012\023\042\024\044\025\045\026\043" +
    "\001\002\000\012\023\042\024\044\025\045\026\043\001" +
    "\002\000\044\004\uffed\007\uffed\010\uffed\012\uffed\013\uffed" +
    "\014\uffed\017\uffed\021\uffed\022\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\034\uffed\035\uffed\036\uffed\037\uffed\001\002" +
    "\000\020\010\033\013\030\021\025\022\024\027\023\031" +
    "\032\036\031\001\002\000\044\004\uffef\007\uffef\010\uffef" +
    "\012\uffef\013\uffef\014\uffef\017\uffef\021\uffef\022\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\001\002\000\044\004\uffee\007\uffee\010\uffee\012" +
    "\uffee\013\uffee\014\uffee\017\uffee\021\uffee\022\uffee\027\uffee" +
    "\030\uffee\031\uffee\032\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\001\002\000\020\010\033\013\030\021\025\022\024" +
    "\027\023\031\032\036\031\001\002\000\044\004\uffeb\007" +
    "\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\017\uffeb\021\uffeb" +
    "\022\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\001\002\000\044\004\uffea\007\uffea" +
    "\010\uffea\012\uffea\013\uffea\014\uffea\017\uffea\021\uffea\022" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\001\002\000\004\007\060\001\002\000" +
    "\054\004\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\017\uffe8\021\uffe8\022\uffe8\023\042\024\044\025\045\026" +
    "\043\027\uffe8\030\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\001\002\000\020\010\033\013\030\021" +
    "\047\022\046\027\023\031\032\036\031\001\002\000\044" +
    "\004\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\017" +
    "\uffe9\021\uffe9\022\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\001\002\000\004\010" +
    "\064\001\002\000\022\007\066\010\033\013\030\021\067" +
    "\022\065\027\023\031\032\036\031\001\002\000\014\007" +
    "\uffb7\023\042\024\044\025\045\026\043\001\002\000\054" +
    "\004\uffbc\007\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\017" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\001\002\000\016\007\uffb8\014\075\023\042" +
    "\024\044\025\045\026\043\001\002\000\006\007\uffba\014" +
    "\073\001\002\000\004\007\072\001\002\000\054\004\uffbd" +
    "\007\uffbd\010\uffbd\012\uffbd\013\uffbd\014\uffbd\017\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\001\002\000\020\010\033\013\030\021\067\022\065" +
    "\027\023\031\032\036\031\001\002\000\004\007\uffbb\001" +
    "\002\000\020\010\033\013\030\021\067\022\065\027\023" +
    "\031\032\036\031\001\002\000\004\007\uffb9\001\002\000" +
    "\020\010\033\013\030\021\047\022\046\027\023\031\032" +
    "\036\031\001\002\000\044\004\uffe7\007\uffe7\010\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\017\uffe7\021\uffe7\022\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\001\002\000\020\010\033\013\030\021\025\022\024" +
    "\027\023\031\032\036\031\001\002\000\004\007\uffc3\001" +
    "\002\000\004\007\uffc4\001\002\000\004\011\105\001\002" +
    "\000\036\004\111\010\033\012\uffcc\013\030\017\115\021" +
    "\113\022\046\027\023\030\106\031\032\032\021\035\006" +
    "\036\031\037\004\001\002\000\020\010\033\013\030\021" +
    "\025\022\024\027\023\031\032\036\031\001\002\000\004" +
    "\012\uffcd\001\002\000\036\004\111\010\033\012\uffcc\013" +
    "\030\017\115\021\113\022\046\027\023\030\106\031\032" +
    "\032\021\035\006\036\031\037\004\001\002\000\036\004" +
    "\111\010\033\012\uffcc\013\030\017\115\021\113\022\046" +
    "\027\023\030\106\031\032\032\021\035\006\036\031\037" +
    "\004\001\002\000\036\004\111\010\033\012\uffcc\013\030" +
    "\017\115\021\113\022\046\027\023\030\106\031\032\032" +
    "\021\035\006\036\031\037\004\001\002\000\014\015\146" +
    "\023\042\024\044\025\045\026\043\001\002\000\036\004" +
    "\111\010\033\012\uffcc\013\030\017\115\021\113\022\046" +
    "\027\023\030\106\031\032\032\021\035\006\036\031\037" +
    "\004\001\002\000\004\020\132\001\002\000\036\004\111" +
    "\010\033\012\uffcc\013\030\017\115\021\113\022\046\027" +
    "\023\030\106\031\032\032\021\035\006\036\031\037\004" +
    "\001\002\000\004\012\124\001\002\000\036\004\111\010" +
    "\033\012\uffcc\013\030\017\115\021\113\022\046\027\023" +
    "\030\106\031\032\032\021\035\006\036\031\037\004\001" +
    "\002\000\036\004\111\010\033\012\uffcc\013\030\017\115" +
    "\021\113\022\046\027\023\030\106\031\032\032\021\035" +
    "\006\036\031\037\004\001\002\000\004\012\uffd2\001\002" +
    "\000\004\012\uffcf\001\002\000\044\004\uffc8\005\uffc8\010" +
    "\uffc8\012\uffc8\013\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\125\035\uffc8\036" +
    "\uffc8\037\uffc8\001\002\000\004\011\126\001\002\000\036" +
    "\004\111\010\033\012\uffcc\013\030\017\115\021\113\022" +
    "\046\027\023\030\106\031\032\032\021\035\006\036\031" +
    "\037\004\001\002\000\004\012\130\001\002\000\042\004" +
    "\uffc7\005\uffc7\010\uffc7\012\uffc7\013\uffc7\016\uffc7\017\uffc7" +
    "\021\uffc7\022\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\001\002\000\004\012\uffd4\001\002" +
    "\000\004\021\134\001\002\000\006\013\140\015\137\001" +
    "\002\000\010\013\ufff4\014\135\015\ufff4\001\002\000\004" +
    "\021\134\001\002\000\006\013\ufff5\015\ufff5\001\002\000" +
    "\020\010\033\013\030\021\025\022\024\027\023\031\032" +
    "\036\031\001\002\000\036\004\uffc9\010\uffc9\012\uffc9\013" +
    "\uffc9\017\uffc9\021\uffc9\022\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\035\uffc9\036\uffc9\037\uffc9\001\002\000\004\013" +
    "\144\001\002\000\004\013\143\001\002\000\036\004\uffca" +
    "\010\uffca\012\uffca\013\uffca\017\uffca\021\uffca\022\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\035\uffca\036\uffca\037\uffca" +
    "\001\002\000\036\004\uffcb\010\uffcb\012\uffcb\013\uffcb\017" +
    "\uffcb\021\uffcb\022\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\001\002\000\004\012\uffce\001" +
    "\002\000\020\010\033\013\030\021\025\022\024\027\023" +
    "\031\032\036\031\001\002\000\004\013\152\001\002\000" +
    "\004\013\151\001\002\000\036\004\uffdf\010\uffdf\012\uffdf" +
    "\013\uffdf\017\uffdf\021\uffdf\022\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\035\uffdf\036\uffdf\037\uffdf\001\002\000\036" +
    "\004\uffe0\010\uffe0\012\uffe0\013\uffe0\017\uffe0\021\uffe0\022" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\001\002\000\004\012\uffd1\001\002\000\004\012" +
    "\uffd3\001\002\000\004\012\uffd0\001\002\000\004\013\161" +
    "\001\002\000\004\013\160\001\002\000\036\004\uffbe\010" +
    "\uffbe\012\uffbe\013\uffbe\017\uffbe\021\uffbe\022\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\035\uffbe\036\uffbe\037\uffbe\001" +
    "\002\000\036\004\uffbf\010\uffbf\012\uffbf\013\uffbf\017\uffbf" +
    "\021\uffbf\022\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\001\002\000\020\010\033\013\030" +
    "\021\047\022\046\027\023\031\032\036\031\001\002\000" +
    "\044\004\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\017\ufff1\021\ufff1\022\ufff1\027\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\ufffc\001\002\000\004\021" +
    "\134\001\002\000\006\013\171\015\170\001\002\000\020" +
    "\010\033\013\030\021\025\022\024\027\023\031\032\036" +
    "\031\001\002\000\016\004\ufff6\005\ufff6\016\ufff6\032\ufff6" +
    "\035\ufff6\037\ufff6\001\002\000\004\013\175\001\002\000" +
    "\004\013\174\001\002\000\016\004\ufff7\005\ufff7\016\ufff7" +
    "\032\ufff7\035\ufff7\037\ufff7\001\002\000\016\004\ufff8\005" +
    "\ufff8\016\ufff8\032\ufff8\035\ufff8\037\ufff8\001\002\000\004" +
    "\002\ufffb\001\002\000\004\002\001\001\002\000\004\010" +
    "\232\001\002\000\004\021\223\001\002\000\004\010\203" +
    "\001\002\000\024\007\uffd5\010\033\013\030\020\206\021" +
    "\204\022\046\027\023\031\032\036\031\001\002\000\016" +
    "\007\uffd6\014\221\023\042\024\044\025\045\026\043\001" +
    "\002\000\006\007\uffda\014\217\001\002\000\004\021\214" +
    "\001\002\000\004\007\210\001\002\000\004\011\211\001" +
    "\002\000\036\004\111\010\033\012\uffcc\013\030\017\115" +
    "\021\113\022\046\027\023\030\106\031\032\032\021\035" +
    "\006\036\031\037\004\001\002\000\004\012\213\001\002" +
    "\000\016\004\uffdc\005\uffdc\016\uffdc\032\uffdc\035\uffdc\037" +
    "\uffdc\001\002\000\006\007\uffd9\014\215\001\002\000\024" +
    "\007\uffd5\010\033\013\030\020\206\021\204\022\046\027" +
    "\023\031\032\036\031\001\002\000\004\007\uffd8\001\002" +
    "\000\024\007\uffd5\010\033\013\030\020\206\021\204\022" +
    "\046\027\023\031\032\036\031\001\002\000\004\007\uffdb" +
    "\001\002\000\024\007\uffd5\010\033\013\030\020\206\021" +
    "\204\022\046\027\023\031\032\036\031\001\002\000\004" +
    "\007\uffd7\001\002\000\004\010\224\001\002\000\024\007" +
    "\uffd5\010\033\013\030\020\206\021\204\022\046\027\023" +
    "\031\032\036\031\001\002\000\004\007\226\001\002\000" +
    "\004\011\227\001\002\000\036\004\111\010\033\012\uffcc" +
    "\013\030\017\115\021\113\022\046\027\023\030\106\031" +
    "\032\032\021\035\006\036\031\037\004\001\002\000\004" +
    "\012\231\001\002\000\016\004\uffdd\005\uffdd\016\uffdd\032" +
    "\uffdd\035\uffdd\037\uffdd\001\002\000\004\007\233\001\002" +
    "\000\004\011\234\001\002\000\036\004\111\010\033\012" +
    "\uffcc\013\030\017\115\021\113\022\046\027\023\030\106" +
    "\031\032\032\021\035\006\036\031\037\004\001\002\000" +
    "\004\012\236\001\002\000\004\002\uffde\001\002\000\004" +
    "\002\ufffa\001\002\000\004\002\ufffd\001\002\000\020\010" +
    "\033\013\030\021\025\022\024\027\023\031\032\036\031" +
    "\001\002\000\004\007\243\001\002\000\004\011\244\001" +
    "\002\000\036\004\111\010\033\012\uffcc\013\030\017\115" +
    "\021\113\022\046\027\023\030\106\031\032\032\021\035" +
    "\006\036\031\037\004\001\002\000\004\012\246\001\002" +
    "\000\042\004\uffc2\005\uffc2\010\uffc2\012\uffc2\013\uffc2\016" +
    "\uffc2\017\uffc2\021\uffc2\022\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\035\uffc2\036\uffc2\037\uffc2\001\002\000\004\002" +
    "\ufffe\001\002\000\020\010\033\013\030\021\025\022\024" +
    "\027\023\031\032\036\031\001\002\000\004\007\255\001" +
    "\002\000\004\007\253\001\002\000\004\013\254\001\002" +
    "\000\020\004\uffc0\005\uffc0\012\uffc0\016\uffc0\032\uffc0\035" +
    "\uffc0\037\uffc0\001\002\000\004\013\256\001\002\000\020" +
    "\004\uffc1\005\uffc1\012\uffc1\016\uffc1\032\uffc1\035\uffc1\037" +
    "\uffc1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\022\002\013\003\010\004\006\007\004\012" +
    "\016\016\007\024\014\025\011\001\001\000\002\001\001" +
    "\000\020\003\246\004\006\007\004\012\016\016\007\024" +
    "\014\025\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\237\004\006\007\004\012\016\016\007\024" +
    "\014\025\011\001\001\000\002\001\001\000\020\003\236" +
    "\004\006\007\004\012\016\016\007\024\014\025\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\175" +
    "\004\006\007\004\012\016\016\007\024\014\025\011\001" +
    "\001\000\002\001\001\000\020\003\164\004\006\007\004" +
    "\012\016\016\007\024\014\025\011\001\001\000\020\003" +
    "\163\004\006\007\004\012\016\016\007\024\014\025\011" +
    "\001\001\000\002\001\001\000\012\010\034\013\025\014" +
    "\026\021\033\001\001\000\004\015\161\001\001\000\004" +
    "\015\053\001\001\000\004\015\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\076" +
    "\001\001\000\002\001\001\000\006\014\056\021\033\001" +
    "\001\000\004\015\040\001\001\000\002\001\001\000\010" +
    "\010\037\014\036\021\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\047\021\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\053\001\001\000\004\015\050\001\001" +
    "\000\002\001\001\000\010\010\052\014\051\021\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\055" +
    "\014\054\021\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\060\001\001\000\006" +
    "\014\061\021\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\067\021\033\022\070\001\001\000\004" +
    "\015\053\001\001\000\002\001\001\000\004\015\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\067\021\033\022\073\001\001\000\002\001" +
    "\001\000\010\014\067\021\033\022\075\001\001\000\002" +
    "\001\001\000\006\014\077\021\033\001\001\000\002\001" +
    "\001\000\010\010\102\014\101\021\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\116\006\120\011\117\012\111\014\113\020\115\021\033" +
    "\024\107\025\106\001\001\000\010\010\156\014\155\021" +
    "\033\001\001\000\002\001\001\000\024\005\154\006\120" +
    "\011\117\012\111\014\113\020\115\021\033\024\107\025" +
    "\106\001\001\000\024\005\153\006\120\011\117\012\111" +
    "\014\113\020\115\021\033\024\107\025\106\001\001\000" +
    "\024\005\152\006\120\011\117\012\111\014\113\020\115" +
    "\021\033\024\107\025\106\001\001\000\004\015\050\001" +
    "\001\000\024\005\144\006\120\011\117\012\111\014\113" +
    "\020\115\021\033\024\107\025\106\001\001\000\002\001" +
    "\001\000\024\005\130\006\120\011\117\012\111\014\113" +
    "\020\115\021\033\024\107\025\106\001\001\000\002\001" +
    "\001\000\024\005\122\006\120\011\117\012\111\014\113" +
    "\020\115\021\033\024\107\025\106\001\001\000\024\005" +
    "\121\006\120\011\117\012\111\014\113\020\115\021\033" +
    "\024\107\025\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\126" +
    "\006\120\011\117\012\111\014\113\020\115\021\033\024" +
    "\107\025\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\135\001\001\000\002" +
    "\001\001\000\010\010\141\014\140\021\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\147\014\146\021\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\162\021\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\166\001\001\000" +
    "\002\001\001\000\010\010\172\014\171\021\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\204\017\206\021\033\001\001\000\004" +
    "\015\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\211\006\120" +
    "\011\117\012\111\014\113\020\115\021\033\024\107\025" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\204\017\215\021\033\001\001\000" +
    "\002\001\001\000\010\014\204\017\217\021\033\001\001" +
    "\000\002\001\001\000\010\014\204\017\221\021\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\204" +
    "\017\224\021\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\227\006\120\011\117\012\111\014\113" +
    "\020\115\021\033\024\107\025\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\005\234\006\120\011\117\012\111\014\113\020" +
    "\115\021\033\024\107\025\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\034\013\241\014\026\021\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\244\006\120\011" +
    "\117\012\111\014\113\020\115\021\033\024\107\025\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\251\014\250\021\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= COM block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= declaration block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= fonction block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= conditionnelle block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= boucle block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // block ::= ecrire block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // block ::= fonctionP 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= GLOB ENTIER parametreD EG operation PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= GLOB ENTIER parametreD EG valeur PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= GLOB ENTIER parametreD PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametreD ::= NOM V parametreD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreD",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametreD ::= NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreD",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valeur ::= NUM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valeur",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valeur ::= NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valeur",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operation ::= OP operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operation ::= OP 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operation ::= NOM operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operation ::= NOM operateur valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operation ::= appel operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operation ::= appel 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operation ::= NUM operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operation ::= NUM operateur valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operation ::= PO operation PF operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operation ::= PO operation PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operation ::= LIRE operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operation ::= LIRE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operation ::= PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operateur ::= PLUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operateur ::= MOINS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operateur ::= MUL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operateur ::= DIV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // affectation ::= NOM EG operation PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // affectation ::= NOM EG valeur PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fonctionP ::= FONCTION PRINC PO PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonctionP",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fonction ::= FONCTION ENTIER NOM PO parametre PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonction",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fonction ::= FONCTION NOM PO parametre PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonction",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametre ::= operation V parametre 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametre ::= operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametre ::= ENTIER NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametre ::= ENTIER NOM V parametre 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametre ::= NOM V parametre 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametre ::= NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametre ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // blockFonction ::= declarationI blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // blockFonction ::= COM blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // blockFonction ::= affectation blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // blockFonction ::= conditionnelle blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // blockFonction ::= boucle blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // blockFonction ::= retourner blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // blockFonction ::= operation blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // blockFonction ::= ecrire 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // blockFonction ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declarationI ::= LOC ENTIER parametreD EG operation PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationI",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declarationI ::= LOC ENTIER parametreD EG valeur PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationI",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declarationI ::= LOC ENTIER parametreD PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationI",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // conditionnelle ::= SI PO condition PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // conditionnelle ::= SI PO condition PF AO blockFonction AF SINON AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condition ::= valeur OPBOOL valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condition ::= valeur OPBOOL operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condition ::= operation OPBOOL valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condition ::= operation OPBOOL operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // boucle ::= TQ PO condition PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("boucle",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ecrire ::= ECRIRE PO operation PF PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ecrire",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ecrire ::= ECRIRE PO valeur PF PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ecrire",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // retourner ::= RET operation PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retourner",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // retourner ::= RET valeur PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retourner",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // appel ::= APPEL NOM PO parametreA PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appel",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // appel ::= APPEL NOM PO PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appel",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametreA ::= operation V parametreA 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametreA ::= operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametreA ::= NOM V parametreA 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametreA ::= NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametreA ::= NUM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
