
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.ul.miage.projet.generated;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\007\010\000\002\007\010\000\002\007\006\000\002" +
    "\020\005\000\002\020\003\000\002\024\003\000\002\024" +
    "\003\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\023\005\000" +
    "\002\023\005\000\002\023\007\000\002\023\007\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\006\006\000\002\006\006\000" +
    "\002\004\011\000\002\014\013\000\002\014\012\000\002" +
    "\015\005\000\002\015\003\000\002\015\004\000\002\015" +
    "\006\000\002\015\005\000\002\015\003\000\002\015\002" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\005\000\002\005\002\000\002\016" +
    "\010\000\002\016\010\000\002\016\006\000\002\011\011" +
    "\000\002\011\015\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\021\011\000\002" +
    "\022\007\000\002\022\007\000\002\010\005\000\002\010" +
    "\005\000\002\025\007\000\002\025\006\000\002\017\005" +
    "\000\002\017\003\000\002\017\005\000\002\017\003\000" +
    "\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\016\013\020\014\013\025\016\032\021\035" +
    "\006\037\004\001\002\000\004\017\251\001\002\000\016" +
    "\013\020\014\013\025\016\032\021\035\006\037\004\001" +
    "\002\000\004\017\242\001\002\000\004\002\ufff9\001\002" +
    "\000\016\013\020\014\013\025\016\032\021\035\006\037" +
    "\004\001\002\000\004\002\000\001\002\000\016\013\020" +
    "\014\013\025\016\032\021\035\006\037\004\001\002\000" +
    "\010\012\203\015\201\027\202\001\002\000\004\002\200" +
    "\001\002\000\016\013\020\014\013\025\016\032\021\035" +
    "\006\037\004\001\002\000\004\027\167\001\002\000\016" +
    "\013\020\014\013\025\016\032\021\035\006\037\004\001" +
    "\002\000\016\013\020\014\013\025\016\032\021\035\006" +
    "\037\004\001\002\000\004\017\022\001\002\000\014\004" +
    "\023\012\024\017\031\031\030\036\027\001\002\000\022" +
    "\005\037\006\042\007\043\010\041\016\ufff3\022\ufff3\023" +
    "\ufff3\034\ufff3\001\002\000\022\005\037\006\042\007\043" +
    "\010\041\016\ufff2\022\ufff2\023\ufff2\034\ufff2\001\002\000" +
    "\004\016\105\001\002\000\004\034\102\001\002\000\022" +
    "\005\037\006\042\007\043\010\041\016\uffe5\022\uffe5\023" +
    "\uffe5\034\uffe5\001\002\000\004\012\063\001\002\000\014" +
    "\004\046\012\050\017\031\031\030\036\027\001\002\000" +
    "\022\005\037\006\042\007\043\010\041\016\uffed\022\uffed" +
    "\023\uffed\034\uffed\001\002\000\004\034\034\001\002\000" +
    "\014\004\023\012\024\017\031\031\030\036\027\001\002" +
    "\000\004\016\uffc6\001\002\000\004\016\uffc5\001\002\000" +
    "\014\004\uffe4\012\uffe4\017\uffe4\031\uffe4\036\uffe4\001\002" +
    "\000\014\004\023\012\024\017\031\031\030\036\027\001" +
    "\002\000\014\004\uffe2\012\uffe2\017\uffe2\031\uffe2\036\uffe2" +
    "\001\002\000\014\004\uffe3\012\uffe3\017\uffe3\031\uffe3\036" +
    "\uffe3\001\002\000\014\004\uffe1\012\uffe1\017\uffe1\031\uffe1" +
    "\036\uffe1\001\002\000\012\016\uffee\022\uffee\023\uffee\034" +
    "\uffee\001\002\000\012\016\uffef\022\uffef\023\uffef\034\uffef" +
    "\001\002\000\012\005\037\006\042\007\043\010\041\001" +
    "\002\000\004\016\054\001\002\000\012\005\037\006\042" +
    "\007\043\010\041\001\002\000\014\004\023\012\024\017" +
    "\031\031\030\036\027\001\002\000\012\016\ufff0\022\ufff0" +
    "\023\ufff0\034\ufff0\001\002\000\012\016\ufff1\022\ufff1\023" +
    "\ufff1\034\ufff1\001\002\000\022\005\037\006\042\007\043" +
    "\010\041\016\uffe8\022\uffe8\023\uffe8\034\uffe8\001\002\000" +
    "\014\004\023\012\024\017\031\031\030\036\027\001\002" +
    "\000\012\016\uffe9\022\uffe9\023\uffe9\034\uffe9\001\002\000" +
    "\012\016\uffea\022\uffea\023\uffea\034\uffea\001\002\000\014" +
    "\004\023\012\024\017\031\031\030\036\027\001\002\000" +
    "\012\016\uffeb\022\uffeb\023\uffeb\034\uffeb\001\002\000\012" +
    "\016\uffec\022\uffec\023\uffec\034\uffec\001\002\000\004\017" +
    "\064\001\002\000\016\004\065\012\067\016\066\017\031" +
    "\031\030\036\027\001\002\000\014\005\037\006\042\007" +
    "\043\010\041\016\uffb7\001\002\000\022\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\016\uffbc\022\uffbc\023\uffbc\034\uffbc\001" +
    "\002\000\016\005\037\006\042\007\043\010\041\016\uffb8" +
    "\023\075\001\002\000\006\016\uffba\023\073\001\002\000" +
    "\004\016\072\001\002\000\022\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\016\uffbd\022\uffbd\023\uffbd\034\uffbd\001\002\000" +
    "\014\004\065\012\067\017\031\031\030\036\027\001\002" +
    "\000\004\016\uffbb\001\002\000\014\004\065\012\067\017" +
    "\031\031\030\036\027\001\002\000\004\016\uffb9\001\002" +
    "\000\014\004\023\012\024\017\031\031\030\036\027\001" +
    "\002\000\012\016\uffe6\022\uffe6\023\uffe6\034\uffe6\001\002" +
    "\000\012\016\uffe7\022\uffe7\023\uffe7\034\uffe7\001\002\000" +
    "\014\004\023\012\024\017\031\031\030\036\027\001\002" +
    "\000\004\016\uffc4\001\002\000\004\016\uffc3\001\002\000" +
    "\004\020\106\001\002\000\024\012\110\013\117\021\uffcc" +
    "\026\111\030\112\031\030\032\021\035\006\037\004\001" +
    "\002\000\024\012\110\013\117\021\uffcc\026\111\030\112" +
    "\031\030\032\021\035\006\037\004\001\002\000\004\024" +
    "\157\001\002\000\004\027\144\001\002\000\014\004\023" +
    "\012\024\017\031\031\030\036\027\001\002\000\024\012" +
    "\110\013\117\021\uffcc\026\111\030\112\031\030\032\021" +
    "\035\006\037\004\001\002\000\024\012\110\013\117\021" +
    "\uffcc\026\111\030\112\031\030\032\021\035\006\037\004" +
    "\001\002\000\024\012\110\013\117\021\uffcc\026\111\030" +
    "\112\031\030\032\021\035\006\037\004\001\002\000\024" +
    "\012\110\013\117\021\uffcc\026\111\030\112\031\030\032" +
    "\021\035\006\037\004\001\002\000\024\012\110\013\117" +
    "\021\uffcc\026\111\030\112\031\030\032\021\035\006\037" +
    "\004\001\002\000\024\012\110\013\117\021\uffcc\026\111" +
    "\030\112\031\030\032\021\035\006\037\004\001\002\000" +
    "\004\022\130\001\002\000\004\021\123\001\002\000\032" +
    "\012\uffc8\013\uffc8\014\uffc8\021\uffc8\025\uffc8\026\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\124\035\uffc8\037\uffc8\001\002" +
    "\000\004\020\125\001\002\000\024\012\110\013\117\021" +
    "\uffcc\026\111\030\112\031\030\032\021\035\006\037\004" +
    "\001\002\000\004\021\127\001\002\000\030\012\uffc7\013" +
    "\uffc7\014\uffc7\021\uffc7\025\uffc7\026\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\035\uffc7\037\uffc7\001\002\000\024\012\110\013" +
    "\117\021\uffcc\026\111\030\112\031\030\032\021\035\006" +
    "\037\004\001\002\000\004\021\uffcd\001\002\000\004\021" +
    "\uffd4\001\002\000\004\021\uffd3\001\002\000\004\021\uffd1" +
    "\001\002\000\004\021\uffd2\001\002\000\004\021\uffd0\001" +
    "\002\000\004\021\uffce\001\002\000\004\022\143\001\002" +
    "\000\004\022\142\001\002\000\024\012\uffbf\013\uffbf\021" +
    "\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\035\uffbf\037\uffbf" +
    "\001\002\000\024\012\uffbe\013\uffbe\021\uffbe\026\uffbe\030" +
    "\uffbe\031\uffbe\032\uffbe\035\uffbe\037\uffbe\001\002\000\004" +
    "\012\146\001\002\000\006\022\152\024\151\001\002\000" +
    "\010\022\ufff4\023\147\024\ufff4\001\002\000\004\012\146" +
    "\001\002\000\006\022\ufff5\024\ufff5\001\002\000\014\004" +
    "\023\012\024\017\031\031\030\036\027\001\002\000\024" +
    "\012\uffc9\013\uffc9\021\uffc9\026\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\035\uffc9\037\uffc9\001\002\000\004\022\156\001\002" +
    "\000\004\022\155\001\002\000\024\012\uffcb\013\uffcb\021" +
    "\uffcb\026\uffcb\030\uffcb\031\uffcb\032\uffcb\035\uffcb\037\uffcb" +
    "\001\002\000\024\012\uffca\013\uffca\021\uffca\026\uffca\030" +
    "\uffca\031\uffca\032\uffca\035\uffca\037\uffca\001\002\000\014" +
    "\004\023\012\024\017\031\031\030\036\027\001\002\000" +
    "\004\022\163\001\002\000\004\022\162\001\002\000\024" +
    "\012\uffe0\013\uffe0\021\uffe0\026\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\035\uffe0\037\uffe0\001\002\000\024\012\uffdf\013\uffdf" +
    "\021\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\035\uffdf\037" +
    "\uffdf\001\002\000\004\021\uffcf\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\ufffc\001\002\000\004\012\146\001" +
    "\002\000\006\022\172\024\171\001\002\000\014\004\023" +
    "\012\024\017\031\031\030\036\027\001\002\000\016\013" +
    "\ufff6\014\ufff6\025\ufff6\032\ufff6\035\ufff6\037\ufff6\001\002" +
    "\000\004\022\176\001\002\000\004\022\175\001\002\000" +
    "\016\013\ufff8\014\ufff8\025\ufff8\032\ufff8\035\ufff8\037\ufff8" +
    "\001\002\000\016\013\ufff7\014\ufff7\025\ufff7\032\ufff7\035" +
    "\ufff7\037\ufff7\001\002\000\004\002\ufffb\001\002\000\004" +
    "\002\001\001\002\000\004\017\233\001\002\000\004\012" +
    "\224\001\002\000\004\017\204\001\002\000\020\004\046" +
    "\012\205\016\uffd5\017\031\027\207\031\030\036\027\001" +
    "\002\000\016\005\037\006\042\007\043\010\041\016\uffd6" +
    "\023\222\001\002\000\006\016\uffda\023\220\001\002\000" +
    "\004\012\215\001\002\000\004\016\211\001\002\000\004" +
    "\020\212\001\002\000\024\012\110\013\117\021\uffcc\026" +
    "\111\030\112\031\030\032\021\035\006\037\004\001\002" +
    "\000\004\021\214\001\002\000\016\013\uffdc\014\uffdc\025" +
    "\uffdc\032\uffdc\035\uffdc\037\uffdc\001\002\000\006\016\uffd9" +
    "\023\216\001\002\000\020\004\046\012\205\016\uffd5\017" +
    "\031\027\207\031\030\036\027\001\002\000\004\016\uffd8" +
    "\001\002\000\020\004\046\012\205\016\uffd5\017\031\027" +
    "\207\031\030\036\027\001\002\000\004\016\uffdb\001\002" +
    "\000\020\004\046\012\205\016\uffd5\017\031\027\207\031" +
    "\030\036\027\001\002\000\004\016\uffd7\001\002\000\004" +
    "\017\225\001\002\000\020\004\046\012\205\016\uffd5\017" +
    "\031\027\207\031\030\036\027\001\002\000\004\016\227" +
    "\001\002\000\004\020\230\001\002\000\024\012\110\013" +
    "\117\021\uffcc\026\111\030\112\031\030\032\021\035\006" +
    "\037\004\001\002\000\004\021\232\001\002\000\016\013" +
    "\uffdd\014\uffdd\025\uffdd\032\uffdd\035\uffdd\037\uffdd\001\002" +
    "\000\004\016\234\001\002\000\004\020\235\001\002\000" +
    "\024\012\110\013\117\021\uffcc\026\111\030\112\031\030" +
    "\032\021\035\006\037\004\001\002\000\004\021\237\001" +
    "\002\000\004\002\uffde\001\002\000\004\002\ufffa\001\002" +
    "\000\004\002\ufffd\001\002\000\014\004\023\012\024\017" +
    "\031\031\030\036\027\001\002\000\004\016\244\001\002" +
    "\000\004\020\245\001\002\000\024\012\110\013\117\021" +
    "\uffcc\026\111\030\112\031\030\032\021\035\006\037\004" +
    "\001\002\000\004\021\247\001\002\000\030\012\uffc2\013" +
    "\uffc2\014\uffc2\021\uffc2\025\uffc2\026\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\035\uffc2\037\uffc2\001\002\000\004\002\ufffe\001" +
    "\002\000\014\004\023\012\024\017\031\031\030\036\027" +
    "\001\002\000\004\016\256\001\002\000\004\016\254\001" +
    "\002\000\004\022\255\001\002\000\030\012\uffc1\013\uffc1" +
    "\014\uffc1\021\uffc1\025\uffc1\026\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\035\uffc1\037\uffc1\001\002\000\004\022\257\001\002" +
    "\000\030\012\uffc0\013\uffc0\014\uffc0\021\uffc0\025\uffc0\026" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\035\uffc0\037\uffc0\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\022\002\013\003\010\004\006\007\004\011" +
    "\016\014\007\021\014\022\011\001\001\000\002\001\001" +
    "\000\020\003\247\004\006\007\004\011\016\014\007\021" +
    "\014\022\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\240\004\006\007\004\011\016\014\007\021" +
    "\014\022\011\001\001\000\002\001\001\000\020\003\237" +
    "\004\006\007\004\011\016\014\007\021\014\022\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\176" +
    "\004\006\007\004\011\016\014\007\021\014\022\011\001" +
    "\001\000\002\001\001\000\020\003\165\004\006\007\004" +
    "\011\016\014\007\021\014\022\011\001\001\000\020\003" +
    "\164\004\006\007\004\011\016\014\007\021\014\022\011" +
    "\001\001\000\002\001\001\000\012\012\024\023\025\024" +
    "\032\025\031\001\001\000\004\013\057\001\001\000\004" +
    "\013\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\076\001\001\000\002\001\001\000\006\023\046" +
    "\025\031\001\001\000\004\013\037\001\001\000\002\001" +
    "\001\000\010\023\035\024\034\025\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\044\024\043\025\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\057\001\001\000\002\001\001\000\004" +
    "\013\050\001\001\000\010\023\052\024\051\025\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\054" +
    "\001\001\000\010\023\056\024\055\025\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\023\061\024\060" +
    "\025\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\070\023\067\025\031\001\001" +
    "\000\004\013\057\001\001\000\002\001\001\000\004\013" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\073\023\067\025\031\001\001\000" +
    "\002\001\001\000\010\017\075\023\067\025\031\001\001" +
    "\000\002\001\001\000\010\023\100\024\077\025\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\023\103" +
    "\024\102\025\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\121\006\114\010\106" +
    "\011\115\016\117\021\113\022\112\025\120\001\001\000" +
    "\022\005\163\006\114\010\106\011\115\016\117\021\113" +
    "\022\112\025\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\140\024\137\025\031\001\001\000\022" +
    "\005\136\006\114\010\106\011\115\016\117\021\113\022" +
    "\112\025\120\001\001\000\022\005\135\006\114\010\106" +
    "\011\115\016\117\021\113\022\112\025\120\001\001\000" +
    "\022\005\134\006\114\010\106\011\115\016\117\021\113" +
    "\022\112\025\120\001\001\000\022\005\133\006\114\010" +
    "\106\011\115\016\117\021\113\022\112\025\120\001\001" +
    "\000\022\005\132\006\114\010\106\011\115\016\117\021" +
    "\113\022\112\025\120\001\001\000\022\005\131\006\114" +
    "\010\106\011\115\016\117\021\113\022\112\025\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\125\006\114\010\106\011" +
    "\115\016\117\021\113\022\112\025\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\130\006\114\010" +
    "\106\011\115\016\117\021\113\022\112\025\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\147\001\001\000" +
    "\002\001\001\000\010\023\153\024\152\025\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\023\160\024\157" +
    "\025\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\167\001\001\000" +
    "\002\001\001\000\010\023\173\024\172\025\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\207\023\205\025\031\001\001\000\004" +
    "\013\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\212\006\114" +
    "\010\106\011\115\016\117\021\113\022\112\025\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\216\023\205\025\031\001\001\000\002\001" +
    "\001\000\010\015\220\023\205\025\031\001\001\000\002" +
    "\001\001\000\010\015\222\023\205\025\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\225\023\205" +
    "\025\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\230\006\114\010\106\011\115\016\117\021\113" +
    "\022\112\025\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\235" +
    "\006\114\010\106\011\115\016\117\021\113\022\112\025" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\242\023\025\024" +
    "\032\025\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\245\006\114\010\106\011\115\016\117\021" +
    "\113\022\112\025\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\252\024\251\025" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= COM block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= declaration block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= fonction block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= conditionnelle block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= boucle block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // block ::= ecrire block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // block ::= fonctionP 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= GLOB ENTIER parametreD EG operation PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= GLOB ENTIER parametreD EG valeur PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= GLOB ENTIER parametreD PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametreD ::= NOM V parametreD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreD",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametreD ::= NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreD",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valeur ::= NUM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valeur",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valeur ::= NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valeur",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operation ::= NOM operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operation ::= NOM operateur valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operation ::= appel operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operation ::= appel operateur valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operation ::= appel 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operation ::= NUM operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operation ::= NUM operateur valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operation ::= PO operation PF operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operation ::= PO operation PF operateur valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operation ::= PO operation PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operation ::= LIRE operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operation ::= LIRE operateur valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operation ::= LIRE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operateur ::= PLUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operateur ::= MOINS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operateur ::= MUL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operateur ::= DIV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // affectation ::= NOM EG operation PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // affectation ::= NOM EG valeur PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fonctionP ::= FONCTION PRINC PO PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonctionP",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fonction ::= FONCTION ENTIER NOM PO parametre PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonction",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fonction ::= FONCTION NOM PO parametre PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonction",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametre ::= operation V parametre 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametre ::= operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametre ::= ENTIER NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametre ::= ENTIER NOM V parametre 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametre ::= NOM V parametre 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametre ::= NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametre ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // blockFonction ::= declarationI blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // blockFonction ::= COM blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // blockFonction ::= affectation blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // blockFonction ::= conditionnelle blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // blockFonction ::= boucle blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // blockFonction ::= retourner blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // blockFonction ::= ecrire blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // blockFonction ::= appel PV blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // blockFonction ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declarationI ::= LOC ENTIER parametreD EG operation PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationI",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declarationI ::= LOC ENTIER parametreD EG valeur PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationI",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declarationI ::= LOC ENTIER parametreD PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationI",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // conditionnelle ::= SI PO condition PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // conditionnelle ::= SI PO condition PF AO blockFonction AF SINON AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condition ::= valeur OPBOOL valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condition ::= valeur OPBOOL operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condition ::= operation OPBOOL valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condition ::= operation OPBOOL operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // boucle ::= TQ PO condition PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("boucle",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ecrire ::= ECRIRE PO operation PF PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ecrire",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ecrire ::= ECRIRE PO valeur PF PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ecrire",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // retourner ::= RET operation PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retourner",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // retourner ::= RET valeur PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retourner",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // appel ::= APPEL NOM PO parametreA PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appel",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // appel ::= APPEL NOM PO PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appel",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametreA ::= operation V parametreA 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametreA ::= operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametreA ::= NOM V parametreA 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametreA ::= NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametreA ::= NUM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
