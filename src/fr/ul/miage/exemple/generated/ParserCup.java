
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.ul.miage.exemple.generated;

import java.util.GregorianCalendar;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\007\010\000\002\007\010\000\002\007\006\000\002" +
    "\023\005\000\002\023\003\000\002\010\003\000\002\010" +
    "\003\000\002\014\005\000\002\014\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\014\005\000\002\014\005\000\002\014\007\000\002" +
    "\014\005\000\002\014\005\000\002\014\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\006\006\000\002\006\006\000\002\004\011\000" +
    "\002\016\013\000\002\016\012\000\002\017\005\000\002" +
    "\017\003\000\002\017\004\000\002\017\006\000\002\017" +
    "\005\000\002\017\003\000\002\017\002\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\003\000\002" +
    "\005\002\000\002\020\010\000\002\020\010\000\002\020" +
    "\006\000\002\012\011\000\002\012\015\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\024\011\000\002\025\007\000\002\025\007\000\002" +
    "\011\005\000\002\011\005\000\002\021\007\000\002\021" +
    "\006\000\002\022\005\000\002\022\003\000\002\022\005" +
    "\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\016\004\020\005\013\016\016\032\021\035" +
    "\006\037\004\001\002\000\004\010\245\001\002\000\016" +
    "\004\020\005\013\016\016\032\021\035\006\037\004\001" +
    "\002\000\004\010\236\001\002\000\004\002\ufff9\001\002" +
    "\000\016\004\020\005\013\016\016\032\021\035\006\037" +
    "\004\001\002\000\004\002\000\001\002\000\016\004\020" +
    "\005\013\016\016\032\021\035\006\037\004\001\002\000" +
    "\010\006\175\020\176\021\177\001\002\000\004\002\174" +
    "\001\002\000\016\004\020\005\013\016\016\032\021\035" +
    "\006\037\004\001\002\000\004\020\163\001\002\000\016" +
    "\004\020\005\013\016\016\032\021\035\006\037\004\001" +
    "\002\000\016\004\020\005\013\016\016\032\021\035\006" +
    "\037\004\001\002\000\004\010\022\001\002\000\016\010" +
    "\032\021\025\022\024\027\023\031\031\036\030\001\002" +
    "\000\022\007\ufff0\013\ufff0\014\ufff0\023\040\024\042\025" +
    "\044\026\043\034\ufff0\001\002\000\022\007\ufff3\013\ufff3" +
    "\014\ufff3\023\040\024\042\025\044\026\043\034\ufff3\001" +
    "\002\000\022\007\ufff2\013\ufff2\014\ufff2\023\040\024\042" +
    "\025\044\026\043\034\ufff2\001\002\000\004\007\103\001" +
    "\002\000\004\034\100\001\002\000\022\007\uffe6\013\uffe6" +
    "\014\uffe6\023\040\024\042\025\044\026\043\034\uffe6\001" +
    "\002\000\004\021\062\001\002\000\016\010\032\021\047" +
    "\022\045\027\023\031\031\036\030\001\002\000\022\007" +
    "\uffec\013\uffec\014\uffec\023\040\024\042\025\044\026\043" +
    "\034\uffec\001\002\000\004\034\035\001\002\000\016\010" +
    "\032\021\025\022\024\027\023\031\031\036\030\001\002" +
    "\000\004\007\uffc7\001\002\000\004\007\uffc8\001\002\000" +
    "\016\010\uffe5\021\uffe5\022\uffe5\027\uffe5\031\uffe5\036\uffe5" +
    "\001\002\000\016\010\032\021\047\022\045\027\023\031" +
    "\031\036\030\001\002\000\016\010\uffe4\021\uffe4\022\uffe4" +
    "\027\uffe4\031\uffe4\036\uffe4\001\002\000\016\010\uffe3\021" +
    "\uffe3\022\uffe3\027\uffe3\031\uffe3\036\uffe3\001\002\000\016" +
    "\010\uffe2\021\uffe2\022\uffe2\027\uffe2\031\uffe2\036\uffe2\001" +
    "\002\000\012\023\040\024\042\025\044\026\043\001\002" +
    "\000\012\007\uffed\013\uffed\014\uffed\034\uffed\001\002\000" +
    "\012\023\040\024\042\025\044\026\043\001\002\000\016" +
    "\010\032\021\025\022\024\027\023\031\031\036\030\001" +
    "\002\000\012\007\uffef\013\uffef\014\uffef\034\uffef\001\002" +
    "\000\012\007\uffee\013\uffee\014\uffee\034\uffee\001\002\000" +
    "\016\010\032\021\025\022\024\027\023\031\031\036\030" +
    "\001\002\000\012\007\uffeb\013\uffeb\014\uffeb\034\uffeb\001" +
    "\002\000\012\007\uffea\013\uffea\014\uffea\034\uffea\001\002" +
    "\000\004\007\057\001\002\000\022\007\uffe8\013\uffe8\014" +
    "\uffe8\023\040\024\042\025\044\026\043\034\uffe8\001\002" +
    "\000\016\010\032\021\047\022\045\027\023\031\031\036" +
    "\030\001\002\000\012\007\uffe9\013\uffe9\014\uffe9\034\uffe9" +
    "\001\002\000\004\010\063\001\002\000\020\007\066\010" +
    "\032\021\065\022\064\027\023\031\031\036\030\001\002" +
    "\000\014\007\uffb9\023\040\024\042\025\044\026\043\001" +
    "\002\000\016\007\uffba\014\074\023\040\024\042\025\044" +
    "\026\043\001\002\000\022\007\uffbe\013\uffbe\014\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\034\uffbe\001\002\000\006" +
    "\007\uffbc\014\072\001\002\000\004\007\071\001\002\000" +
    "\022\007\uffbf\013\uffbf\014\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\034\uffbf\001\002\000\016\010\032\021\065\022" +
    "\064\027\023\031\031\036\030\001\002\000\004\007\uffbd" +
    "\001\002\000\016\010\032\021\065\022\064\027\023\031" +
    "\031\036\030\001\002\000\004\007\uffbb\001\002\000\016" +
    "\010\032\021\047\022\045\027\023\031\031\036\030\001" +
    "\002\000\012\007\uffe7\013\uffe7\014\uffe7\034\uffe7\001\002" +
    "\000\016\010\032\021\025\022\024\027\023\031\031\036" +
    "\030\001\002\000\004\007\uffc5\001\002\000\004\007\uffc6" +
    "\001\002\000\004\011\104\001\002\000\022\004\115\012" +
    "\uffce\017\107\021\106\030\110\032\021\035\006\037\004" +
    "\001\002\000\022\004\115\012\uffce\017\107\021\106\030" +
    "\110\032\021\035\006\037\004\001\002\000\004\015\151" +
    "\001\002\000\004\020\136\001\002\000\016\010\032\021" +
    "\025\022\024\027\023\031\031\036\030\001\002\000\004" +
    "\012\uffcf\001\002\000\022\004\115\012\uffce\017\107\021" +
    "\106\030\110\032\021\035\006\037\004\001\002\000\022" +
    "\004\115\012\uffce\017\107\021\106\030\110\032\021\035" +
    "\006\037\004\001\002\000\022\004\115\012\uffce\017\107" +
    "\021\106\030\110\032\021\035\006\037\004\001\002\000" +
    "\022\004\115\012\uffce\017\107\021\106\030\110\032\021" +
    "\035\006\037\004\001\002\000\022\004\115\012\uffce\017" +
    "\107\021\106\030\110\032\021\035\006\037\004\001\002" +
    "\000\004\012\120\001\002\000\030\004\uffca\005\uffca\012" +
    "\uffca\016\uffca\017\uffca\021\uffca\030\uffca\032\uffca\033\121" +
    "\035\uffca\037\uffca\001\002\000\004\011\122\001\002\000" +
    "\022\004\115\012\uffce\017\107\021\106\030\110\032\021" +
    "\035\006\037\004\001\002\000\004\012\124\001\002\000" +
    "\026\004\uffc9\005\uffc9\012\uffc9\016\uffc9\017\uffc9\021\uffc9" +
    "\030\uffc9\032\uffc9\035\uffc9\037\uffc9\001\002\000\004\012" +
    "\uffd5\001\002\000\004\012\uffd4\001\002\000\004\012\uffd2" +
    "\001\002\000\004\012\uffd3\001\002\000\004\012\uffd1\001" +
    "\002\000\004\013\135\001\002\000\004\013\134\001\002" +
    "\000\022\004\uffc0\012\uffc0\017\uffc0\021\uffc0\030\uffc0\032" +
    "\uffc0\035\uffc0\037\uffc0\001\002\000\022\004\uffc1\012\uffc1" +
    "\017\uffc1\021\uffc1\030\uffc1\032\uffc1\035\uffc1\037\uffc1\001" +
    "\002\000\004\021\140\001\002\000\006\013\144\015\143" +
    "\001\002\000\010\013\ufff4\014\141\015\ufff4\001\002\000" +
    "\004\021\140\001\002\000\006\013\ufff5\015\ufff5\001\002" +
    "\000\016\010\032\021\025\022\024\027\023\031\031\036" +
    "\030\001\002\000\022\004\uffcb\012\uffcb\017\uffcb\021\uffcb" +
    "\030\uffcb\032\uffcb\035\uffcb\037\uffcb\001\002\000\004\013" +
    "\150\001\002\000\004\013\147\001\002\000\022\004\uffcc" +
    "\012\uffcc\017\uffcc\021\uffcc\030\uffcc\032\uffcc\035\uffcc\037" +
    "\uffcc\001\002\000\022\004\uffcd\012\uffcd\017\uffcd\021\uffcd" +
    "\030\uffcd\032\uffcd\035\uffcd\037\uffcd\001\002\000\016\010" +
    "\032\021\025\022\024\027\023\031\031\036\030\001\002" +
    "\000\004\013\155\001\002\000\004\013\154\001\002\000" +
    "\022\004\uffe0\012\uffe0\017\uffe0\021\uffe0\030\uffe0\032\uffe0" +
    "\035\uffe0\037\uffe0\001\002\000\022\004\uffe1\012\uffe1\017" +
    "\uffe1\021\uffe1\030\uffe1\032\uffe1\035\uffe1\037\uffe1\001\002" +
    "\000\004\012\uffd0\001\002\000\016\010\032\021\047\022" +
    "\045\027\023\031\031\036\030\001\002\000\012\007\ufff1" +
    "\013\ufff1\014\ufff1\034\ufff1\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\ufffc\001\002\000\004\021\140\001\002" +
    "\000\006\013\166\015\165\001\002\000\016\010\032\021" +
    "\025\022\024\027\023\031\031\036\030\001\002\000\016" +
    "\004\ufff6\005\ufff6\016\ufff6\032\ufff6\035\ufff6\037\ufff6\001" +
    "\002\000\004\013\172\001\002\000\004\013\171\001\002" +
    "\000\016\004\ufff7\005\ufff7\016\ufff7\032\ufff7\035\ufff7\037" +
    "\ufff7\001\002\000\016\004\ufff8\005\ufff8\016\ufff8\032\ufff8" +
    "\035\ufff8\037\ufff8\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\001\001\002\000\004\010\227\001\002\000\004" +
    "\021\220\001\002\000\004\010\200\001\002\000\022\007" +
    "\uffd6\010\032\020\203\021\201\022\045\027\023\031\031" +
    "\036\030\001\002\000\016\007\uffd7\014\216\023\040\024" +
    "\042\025\044\026\043\001\002\000\006\007\uffdb\014\214" +
    "\001\002\000\004\021\211\001\002\000\004\007\205\001" +
    "\002\000\004\011\206\001\002\000\022\004\115\012\uffce" +
    "\017\107\021\106\030\110\032\021\035\006\037\004\001" +
    "\002\000\004\012\210\001\002\000\016\004\uffdd\005\uffdd" +
    "\016\uffdd\032\uffdd\035\uffdd\037\uffdd\001\002\000\006\007" +
    "\uffda\014\212\001\002\000\022\007\uffd6\010\032\020\203" +
    "\021\201\022\045\027\023\031\031\036\030\001\002\000" +
    "\004\007\uffd9\001\002\000\022\007\uffd6\010\032\020\203" +
    "\021\201\022\045\027\023\031\031\036\030\001\002\000" +
    "\004\007\uffdc\001\002\000\022\007\uffd6\010\032\020\203" +
    "\021\201\022\045\027\023\031\031\036\030\001\002\000" +
    "\004\007\uffd8\001\002\000\004\010\221\001\002\000\022" +
    "\007\uffd6\010\032\020\203\021\201\022\045\027\023\031" +
    "\031\036\030\001\002\000\004\007\223\001\002\000\004" +
    "\011\224\001\002\000\022\004\115\012\uffce\017\107\021" +
    "\106\030\110\032\021\035\006\037\004\001\002\000\004" +
    "\012\226\001\002\000\016\004\uffde\005\uffde\016\uffde\032" +
    "\uffde\035\uffde\037\uffde\001\002\000\004\007\230\001\002" +
    "\000\004\011\231\001\002\000\022\004\115\012\uffce\017" +
    "\107\021\106\030\110\032\021\035\006\037\004\001\002" +
    "\000\004\012\233\001\002\000\004\002\uffdf\001\002\000" +
    "\004\002\ufffa\001\002\000\004\002\ufffd\001\002\000\016" +
    "\010\032\021\025\022\024\027\023\031\031\036\030\001" +
    "\002\000\004\007\240\001\002\000\004\011\241\001\002" +
    "\000\022\004\115\012\uffce\017\107\021\106\030\110\032" +
    "\021\035\006\037\004\001\002\000\004\012\243\001\002" +
    "\000\026\004\uffc4\005\uffc4\012\uffc4\016\uffc4\017\uffc4\021" +
    "\uffc4\030\uffc4\032\uffc4\035\uffc4\037\uffc4\001\002\000\004" +
    "\002\ufffe\001\002\000\016\010\032\021\025\022\024\027" +
    "\023\031\031\036\030\001\002\000\004\007\252\001\002" +
    "\000\004\007\250\001\002\000\004\013\251\001\002\000" +
    "\020\004\uffc2\005\uffc2\012\uffc2\016\uffc2\032\uffc2\035\uffc2" +
    "\037\uffc2\001\002\000\004\013\253\001\002\000\020\004" +
    "\uffc3\005\uffc3\012\uffc3\016\uffc3\032\uffc3\035\uffc3\037\uffc3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\022\002\013\003\010\004\006\007\004\012" +
    "\016\016\007\024\014\025\011\001\001\000\002\001\001" +
    "\000\020\003\243\004\006\007\004\012\016\016\007\024" +
    "\014\025\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\234\004\006\007\004\012\016\016\007\024" +
    "\014\025\011\001\001\000\002\001\001\000\020\003\233" +
    "\004\006\007\004\012\016\016\007\024\014\025\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\172" +
    "\004\006\007\004\012\016\016\007\024\014\025\011\001" +
    "\001\000\002\001\001\000\020\003\161\004\006\007\004" +
    "\012\016\016\007\024\014\025\011\001\001\000\020\003" +
    "\160\004\006\007\004\012\016\016\007\024\014\025\011" +
    "\001\001\000\002\001\001\000\012\010\033\013\025\014" +
    "\026\021\032\001\001\000\004\015\156\001\001\000\004" +
    "\015\052\001\001\000\004\015\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\075\001\001\000\002" +
    "\001\001\000\006\014\055\021\032\001\001\000\004\015" +
    "\040\001\001\000\002\001\001\000\010\010\036\014\035" +
    "\021\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\045\021\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\052\001\001\000\002\001\001\000\004\015\047\001\001" +
    "\000\010\010\051\014\050\021\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\054\014\053\021\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\057\001\001\000\006\014\060\021\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\066\021\032\022\067\001\001\000\004\015\052\001\001" +
    "\000\004\015\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\066" +
    "\021\032\022\072\001\001\000\002\001\001\000\010\014" +
    "\066\021\032\022\074\001\001\000\002\001\001\000\006" +
    "\014\076\021\032\001\001\000\002\001\001\000\010\010" +
    "\101\014\100\021\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\116\006\112\011" +
    "\104\012\113\020\115\024\111\025\110\001\001\000\020" +
    "\005\155\006\112\011\104\012\113\020\115\024\111\025" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\132\014\131\021\032\001\001\000\002\001\001\000" +
    "\020\005\130\006\112\011\104\012\113\020\115\024\111" +
    "\025\110\001\001\000\020\005\127\006\112\011\104\012" +
    "\113\020\115\024\111\025\110\001\001\000\020\005\126" +
    "\006\112\011\104\012\113\020\115\024\111\025\110\001" +
    "\001\000\020\005\125\006\112\011\104\012\113\020\115" +
    "\024\111\025\110\001\001\000\020\005\124\006\112\011" +
    "\104\012\113\020\115\024\111\025\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\122\006\112\011\104\012\113\020\115\024\111\025\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\141\001" +
    "\001\000\002\001\001\000\010\010\145\014\144\021\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\152" +
    "\014\151\021\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\157\021\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\163\001\001" +
    "\000\002\001\001\000\010\010\167\014\166\021\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\201\017\203\021\032\001\001\000" +
    "\004\015\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\206\006" +
    "\112\011\104\012\113\020\115\024\111\025\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\201\017\212\021\032\001\001\000\002\001\001" +
    "\000\010\014\201\017\214\021\032\001\001\000\002\001" +
    "\001\000\010\014\201\017\216\021\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\201\017\221\021" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\224\006\112\011\104\012\113\020\115\024\111\025" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\231\006\112\011" +
    "\104\012\113\020\115\024\111\025\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\033\013\236\014\026\021\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\241\006" +
    "\112\011\104\012\113\020\115\024\111\025\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\246\014\245\021\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {

//@@CUPDBG0

	void afficherResultat(){
		System.out.println("Nombre d'utilisateur : ");
	}

  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= COM block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= declaration block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= fonction block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= conditionnelle block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= boucle block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // block ::= ecrire block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // block ::= fonctionP 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= GLOB ENTIER parametreD EG operation PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= GLOB ENTIER parametreD EG valeur PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= GLOB ENTIER parametreD PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametreD ::= NOM V parametreD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreD",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametreD ::= NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreD",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valeur ::= NUM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valeur",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valeur ::= NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valeur",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operation ::= OP operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operation ::= OP 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operation ::= NOM operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operation ::= NOM operateur valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operation ::= appel operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operation ::= appel 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operation ::= NUM operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operation ::= NUM operateur valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operation ::= PO operation PF operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operation ::= PO operation PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operation ::= LIRE operateur operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operation ::= LIRE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operateur ::= PLUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operateur ::= MOINS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operateur ::= MUL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operateur ::= DIV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // affectation ::= NOM EG operation PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // affectation ::= NOM EG valeur PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // fonctionP ::= FONCTION PRINC PO PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonctionP",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fonction ::= FONCTION ENTIER NOM PO parametre PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonction",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fonction ::= FONCTION NOM PO parametre PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonction",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametre ::= operation V parametre 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametre ::= operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametre ::= ENTIER NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametre ::= ENTIER NOM V parametre 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametre ::= NOM V parametre 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametre ::= NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametre ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // blockFonction ::= declarationI blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // blockFonction ::= COM blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // blockFonction ::= affectation blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // blockFonction ::= conditionnelle blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // blockFonction ::= boucle blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // blockFonction ::= retourner blockFonction 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // blockFonction ::= ecrire 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // blockFonction ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blockFonction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declarationI ::= LOC ENTIER parametreD EG operation PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationI",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declarationI ::= LOC ENTIER parametreD EG valeur PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationI",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declarationI ::= LOC ENTIER parametreD PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declarationI",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // conditionnelle ::= SI PO condition PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // conditionnelle ::= SI PO condition PF AO blockFonction AF SINON AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condition ::= valeur OPBOOL valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condition ::= valeur OPBOOL operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condition ::= operation OPBOOL valeur 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condition ::= operation OPBOOL operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // boucle ::= TQ PO condition PF AO blockFonction AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("boucle",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ecrire ::= ECRIRE PO operation PF PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ecrire",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ecrire ::= ECRIRE PO valeur PF PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ecrire",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // retourner ::= RET operation PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retourner",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // retourner ::= RET valeur PV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retourner",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // appel ::= APPEL NOM PO parametreA PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appel",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // appel ::= APPEL NOM PO PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appel",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametreA ::= operation V parametreA 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametreA ::= operation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametreA ::= NOM V parametreA 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametreA ::= NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametreA ::= NUM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametreA",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
